<!DOCTYPE html>
<html>
  <head>
    <title>Canyon</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Archivo:ital,wght@0,100..900;1,100..900&display=swap"
      rel="stylesheet"
    />
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      /**
       * TreeJS is a JavaScript librarie for displaying TreeViews
       * on the web.
       *
       * @author Matthias Thalmann
       */

      function TreeView(root, container, options) {
        var self = this;

        /*
         * Konstruktor
         */
        if (typeof root === "undefined") {
          throw new Error("Parameter 1 must be set (root)");
        }

        if (!(root instanceof TreeNode)) {
          throw new Error("Parameter 1 must be of type TreeNode");
        }

        if (container) {
          if (!TreeUtil.isDOM(container)) {
            container = document.querySelector(container);

            if (container instanceof Array) {
              container = container[0];
            }

            if (!TreeUtil.isDOM(container)) {
              throw new Error(
                "Parameter 2 must be either DOM-Object or CSS-QuerySelector (#, .)"
              );
            }
          }
        } else {
          container = null;
        }

        if (!options || typeof options !== "object") {
          options = {};
        }

        /*
         * Methods
         */
        this.setRoot = function (_root) {
          if (root instanceof TreeNode) {
            root = _root;
          }
        };

        this.getRoot = function () {
          return root;
        };

        this.expandAllNodes = function () {
          root.setExpanded(true);

          root.getChildren().forEach(function (child) {
            TreeUtil.expandNode(child);
          });
        };

        this.expandPath = function (path) {
          if (!(path instanceof TreePath)) {
            throw new Error("Parameter 1 must be of type TreePath");
          }

          path.getPath().forEach(function (node) {
            node.setExpanded(true);
          });
        };

        this.collapseAllNodes = function () {
          root.setExpanded(false);

          root.getChildren().forEach(function (child) {
            TreeUtil.collapseNode(child);
          });
        };

        this.setContainer = function (_container) {
          if (TreeUtil.isDOM(_container)) {
            container = _container;
          } else {
            _container = document.querySelector(_container);

            if (_container instanceof Array) {
              _container = _container[0];
            }

            if (!TreeUtil.isDOM(_container)) {
              throw new Error(
                "Parameter 1 must be either DOM-Object or CSS-QuerySelector (#, .)"
              );
            }
          }
        };

        this.getContainer = function () {
          return container;
        };

        this.setOptions = function (_options) {
          if (typeof _options === "object") {
            options = _options;
          }
        };

        this.changeOption = function (option, value) {
          options[option] = value;
        };

        this.getOptions = function () {
          return options;
        };

        // TODO: set selected key: up down; expand right; collapse left; enter: open;
        this.getSelectedNodes = function () {
          return TreeUtil.getSelectedNodesForNode(root);
        };

        this.reload = function () {
          if (container == null) {
            console.warn("No container specified");
            return;
          }

          container.classList.add("tj_container");

          var cnt = document.createElement("ul");

          if (TreeUtil.getProperty(options, "show_root", true)) {
            cnt.appendChild(renderNode(root));
          } else {
            root.getChildren().forEach(function (child) {
              cnt.appendChild(renderNode(child));
            });
          }

          container.innerHTML = "";
          container.appendChild(cnt);
        };

        function renderNode(node) {
          var li_outer = document.createElement("li");
          var span_desc = document.createElement("span");
          span_desc.className = "tj_description";
          span_desc.tj_node = node;

          if (!node.isEnabled()) {
            li_outer.setAttribute("disabled", "");
            node.setExpanded(false);
            node.setSelected(false);
          }

          if (node.isSelected()) {
            span_desc.classList.add("selected");
          }

          span_desc.addEventListener("click", function (e) {
            var cur_el = e.target;

            while (
              typeof cur_el.tj_node === "undefined" ||
              cur_el.classList.contains("tj_container")
            ) {
              cur_el = cur_el.parentElement;
            }

            var node_cur = cur_el.tj_node;

            if (typeof node_cur === "undefined") {
              return;
            }

            if (node_cur.isEnabled()) {
              if (e.ctrlKey == false) {
                if (!node_cur.isLeaf()) {
                  node_cur.toggleExpanded();
                  self.reload();
                } else {
                  node_cur.open();
                }

                node_cur.on("click")(e, node_cur);
              }

              if (e.ctrlKey == true) {
                node_cur.toggleSelected();
                self.reload();
              } else {
                var rt = node_cur.getRoot();

                if (rt instanceof TreeNode) {
                  TreeUtil.getSelectedNodesForNode(rt).forEach(function (_nd) {
                    _nd.setSelected(false);
                  });
                }
                node_cur.setSelected(true);

                self.reload();
              }
            }
          });

          span_desc.addEventListener("contextmenu", function (e) {
            var cur_el = e.target;

            while (
              typeof cur_el.tj_node === "undefined" ||
              cur_el.classList.contains("tj_container")
            ) {
              cur_el = cur_el.parentElement;
            }

            var node_cur = cur_el.tj_node;

            if (typeof node_cur === "undefined") {
              return;
            }

            if (typeof node_cur.getListener("contextmenu") !== "undefined") {
              node_cur.on("contextmenu")(e, node_cur);
              e.preventDefault();
            } else if (typeof TreeConfig.context_menu === "function") {
              TreeConfig.context_menu(e, node_cur);
              e.preventDefault();
            }
          });

          if (
            node.isLeaf() &&
            !TreeUtil.getProperty(node.getOptions(), "forceParent", false)
          ) {
            var ret = "";
            // var icon = TreeUtil.getProperty(node.getOptions(), "icon", "");
            // if(icon != ""){
            // 	ret += '<span class="tj_icon">' + icon + '</span>';
            // }else if((icon = TreeUtil.getProperty(options, "leaf_icon", "")) != ""){
            // 	ret += '<span class="tj_icon">' + icon + '</span>';
            // }else{
            // 	ret += '<span class="tj_icon">' + TreeConfig.leaf_icon + '</span>';
            // }

            span_desc.innerHTML = ret + node.toString() + "</span>";
            span_desc.classList.add("tj_leaf");
            span_desc.setAttribute("title", node.toString());

            li_outer.appendChild(span_desc);
          } else {
            var ret = "";
            if (node.isExpanded()) {
              ret +=
                '<span class="tj_mod_icon">' + TreeConfig.open_icon + "</span>";
            } else {
              ret +=
                '<span class="tj_mod_icon">' +
                TreeConfig.close_icon +
                "</span>";
            }

            // var icon = TreeUtil.getProperty(node.getOptions(), "icon", "");
            // if(icon != ""){
            // 	ret += '<span class="tj_icon">' + icon + '</span>';
            // }else if((icon = TreeUtil.getProperty(options, "parent_icon", "")) != ""){
            // 	ret += '<span class="tj_icon">' + icon + '</span>';
            // }else{
            // 	ret += '<span class="tj_icon">' + TreeConfig.parent_icon + '</span>';
            // }

            span_desc.innerHTML = ret + node.toString() + "</span>";
            span_desc.setAttribute("title", node.toString());

            li_outer.appendChild(span_desc);

            if (node.isExpanded()) {
              var ul_container = document.createElement("ul");

              node.getChildren().forEach(function (child) {
                ul_container.appendChild(renderNode(child));
              });

              li_outer.appendChild(ul_container);
            }
          }

          return li_outer;
        }

        if (typeof container !== "undefined") this.reload();
      }

      function TreeNode(userObject, options) {
        var children = new Array();
        var self = this;
        var events = new Array();

        var expanded = true;
        var enabled = true;
        var selected = false;

        /*
         * Konstruktor
         */
        if (userObject) {
          if (
            typeof userObject !== "string" &&
            typeof userObject.toString !== "function"
          ) {
            throw new Error(
              "Parameter 1 must be of type String or Object, where it must have the function toString()"
            );
          }
        } else {
          userObject = "";
        }

        if (!options || typeof options !== "object") {
          options = {};
        } else {
          expanded = TreeUtil.getProperty(options, "expanded", true);
          enabled = TreeUtil.getProperty(options, "enabled", true);
          selected = TreeUtil.getProperty(options, "selected", false);
        }

        /*
         * Methods
         */
        this.addChild = function (node) {
          if (!TreeUtil.getProperty(options, "allowsChildren", true)) {
            console.warn(
              "Option allowsChildren is set to false, no child added"
            );
            return;
          }

          if (node instanceof TreeNode) {
            children.push(node);

            //Konstante hinzufügen (workaround)
            Object.defineProperty(node, "parent", {
              value: this,
              writable: false,
              enumerable: true,
              configurable: true,
            });
          } else {
            throw new Error("Parameter 1 must be of type TreeNode");
          }
        };

        this.removeChildPos = function (pos) {
          if (typeof children[pos] !== "undefined") {
            if (typeof children[pos] !== "undefined") {
              children.splice(pos, 1);
            }
          }
        };

        this.removeChild = function (node) {
          if (!(node instanceof TreeNode)) {
            throw new Error("Parameter 1 must be of type TreeNode");
          }

          this.removeChildPos(this.getIndexOfChild(node));
        };

        this.getChildren = function () {
          return children;
        };

        this.getChildCount = function () {
          return children.length;
        };

        this.getIndexOfChild = function (node) {
          for (var i = 0; i < children.length; i++) {
            if (children[i].equals(node)) {
              return i;
            }
          }

          return -1;
        };

        this.getRoot = function () {
          var node = this;

          while (typeof node.parent !== "undefined") {
            node = node.parent;
          }

          return node;
        };

        this.setUserObject = function (_userObject) {
          if (
            !(typeof _userObject === "string") ||
            typeof _userObject.toString !== "function"
          ) {
            throw new Error(
              "Parameter 1 must be of type String or Object, where it must have the function toString()"
            );
          } else {
            userObject = _userObject;
          }
        };

        this.getUserObject = function () {
          return userObject;
        };

        this.setOptions = function (_options) {
          if (typeof _options === "object") {
            options = _options;
          }
        };

        this.changeOption = function (option, value) {
          options[option] = value;
        };

        this.getOptions = function () {
          return options;
        };

        this.isLeaf = function () {
          return children.length == 0;
        };

        this.setExpanded = function (_expanded) {
          if (this.isLeaf()) {
            return;
          }

          if (typeof _expanded === "boolean") {
            if (expanded == _expanded) {
              return;
            }

            expanded = _expanded;

            if (_expanded) {
              this.on("expand")(this);
            } else {
              this.on("collapse")(this);
            }

            this.on("toggle_expanded")(this);
          }
        };

        this.toggleExpanded = function () {
          if (expanded) {
            this.setExpanded(false);
          } else {
            this.setExpanded(true);
          }
        };

        this.isExpanded = function () {
          if (this.isLeaf()) {
            return true;
          } else {
            return expanded;
          }
        };

        this.setEnabled = function (_enabled) {
          if (typeof _enabled === "boolean") {
            if (enabled == _enabled) {
              return;
            }

            enabled = _enabled;

            if (_enabled) {
              this.on("enable")(this);
            } else {
              this.on("disable")(this);
            }

            this.on("toggle_enabled")(this);
          }
        };

        this.toggleEnabled = function () {
          if (enabled) {
            this.setEnabled(false);
          } else {
            this.setEnabled(true);
          }
        };

        this.isEnabled = function () {
          return enabled;
        };

        this.setSelected = function (_selected) {
          if (typeof _selected !== "boolean") {
            return;
          }

          if (selected == _selected) {
            return;
          }

          selected = _selected;

          if (_selected) {
            this.on("select")(this);
          } else {
            this.on("deselect")(this);
          }

          this.on("toggle_selected")(this);
        };

        this.toggleSelected = function () {
          if (selected) {
            this.setSelected(false);
          } else {
            this.setSelected(true);
          }
        };

        this.isSelected = function () {
          return selected;
        };

        this.open = function () {
          if (!this.isLeaf()) {
            this.on("open")(this);
          }
        };

        this.on = function (ev, callback) {
          if (typeof callback === "undefined") {
            if (typeof events[ev] !== "function") {
              return function () {};
            } else {
              return events[ev];
            }
          }

          if (typeof callback !== "function") {
            throw new Error("Argument 2 must be of type function");
          }

          events[ev] = callback;
        };

        this.getListener = function (ev) {
          return events[ev];
        };

        this.equals = function (node) {
          if (node instanceof TreeNode) {
            if (node.getUserObject() == userObject) {
              return true;
            }
          }

          return false;
        };

        this.toString = function () {
          if (typeof userObject === "string") {
            return userObject;
          } else {
            return userObject.name;
          }
        };
      }

      function TreePath(root, node) {
        var nodes = new Array();

        this.setPath = function (root, node) {
          nodes = new Array();

          while (typeof node !== "undefined" && !node.equals(root)) {
            nodes.push(node);
            node = node.parent;
          }

          if (node.equals(root)) {
            nodes.push(root);
          } else {
            nodes = new Array();
            throw new Error("Node is not contained in the tree of root");
          }

          nodes = nodes.reverse();

          return nodes;
        };

        this.getPath = function () {
          return nodes;
        };

        this.toString = function () {
          return nodes.join(" - ");
        };

        if (root instanceof TreeNode && node instanceof TreeNode) {
          this.setPath(root, node);
        }
      }

      /*
       * Util-Methods
       */
      const TreeUtil = {
        default_leaf_icon: "<span>&#9642;</span>",
        default_parent_icon: "<span>&#128449;</span>",
        default_open_icon: "<span>&#9207;</span>",
        default_close_icon: "<span>&#9205;</span>",

        isDOM: function (obj) {
          try {
            return obj instanceof HTMLElement;
          } catch (e) {
            return (
              typeof obj === "object" &&
              obj.nodeType === 1 &&
              typeof obj.style === "object" &&
              typeof obj.ownerDocument === "object"
            );
          }
        },

        getProperty: function (options, opt, def) {
          if (typeof options[opt] === "undefined") {
            return def;
          }

          return options[opt];
        },

        expandNode: function (node) {
          node.setExpanded(true);

          if (!node.isLeaf()) {
            node.getChildren().forEach(function (child) {
              TreeUtil.expandNode(child);
            });
          }
        },

        collapseNode: function (node) {
          node.setExpanded(false);

          if (!node.isLeaf()) {
            node.getChildren().forEach(function (child) {
              TreeUtil.collapseNode(child);
            });
          }
        },

        getSelectedNodesForNode: function (node) {
          if (!(node instanceof TreeNode)) {
            throw new Error("Parameter 1 must be of type TreeNode");
          }

          var ret = new Array();

          if (node.isSelected()) {
            ret.push(node);
          }

          node.getChildren().forEach(function (child) {
            if (child.isSelected()) {
              if (ret.indexOf(child) == -1) {
                ret.push(child);
              }
            }

            if (!child.isLeaf()) {
              TreeUtil.getSelectedNodesForNode(child).forEach(function (_node) {
                if (ret.indexOf(_node) == -1) {
                  ret.push(_node);
                }
              });
            }
          });

          return ret;
        },
      };

      var TreeConfig = {
        leaf_icon: TreeUtil.default_leaf_icon,
        parent_icon: TreeUtil.default_parent_icon,
        open_icon: TreeUtil.default_open_icon,
        close_icon: TreeUtil.default_close_icon,
        context_menu: undefined,
      };
    </script>
    <style>
      * {
        font-family: "Archivo", sans-serif;
      }

      :root {
        /* Base color palette */
        --color-tan-50: #fcf9f8;
        --color-tan-100: #f9f2f1;
        --color-tan-200: #f1e3df;
        --color-tan-300: #ebd6d1;
        --color-tan-400: #e3c6bf;
        --color-tan-500: #ddbab1;
        --color-tan-600: #c48778;
        --color-tan-700: #a75c49;
        --color-tan-800: #6e3c30;
        --color-tan-900: #391f19;
        --color-tan-950: #1c100c;
        --color-black-50: #e8e8e8;
        --color-black-100: #d1d1d1;
        --color-black-200: #a3a3a3;
        --color-black-300: #737373;
        --color-black-400: #454545;
        --color-black-500: #171717;
        --color-black-600: #141414;
        --color-black-700: #141414;
        --color-black-800: #121212;
        --color-black-900: #121212;
        --color-black-950: #0f0f0f;
        --color-red-50: #ffebeb;
        --color-red-100: #ffdbdb;
        --color-red-200: #ffb3b3;
        --color-red-300: #ff8f8f;
        --color-red-400: #ff6b6b;
        --color-red-500: #ff4444;
        --color-red-600: #ff0505;
        --color-red-700: #c20000;
        --color-red-800: #800000;
        --color-red-900: #420000;
        --color-red-950: #1f0000;
        --color-brown-50: #f2e6e3;
        --color-brown-100: #e7d0ca;
        --color-brown-200: #ce9e92;
        --color-brown-300: #b76f5d;
        --color-brown-400: #8a4d3d;
        --color-brown-500: #532e25;
        --color-brown-600: #43251e;
        --color-brown-700: #311b16;
        --color-brown-800: #20120e;
        --color-brown-900: #120a08;
        --color-brown-950: #070403;
        --color-purple-50: #ebeaf1;
        --color-purple-100: #d8d4e2;
        --color-purple-200: #aea7c3;
        --color-purple-300: #877ca6;
        --color-purple-400: #635983;
        --color-purple-500: #423b57;
        --color-purple-600: #352f46;
        --color-purple-700: #272334;
        --color-purple-800: #191721;
        --color-purple-900: #0e0c12;
        --color-purple-950: #070609;
        --color-orange-50: #fdede7;
        --color-orange-100: #fcded4;
        --color-orange-200: #f9bda9;
        --color-orange-300: #f79c7e;
        --color-orange-400: #f47b53;
        --color-orange-500: #f15a26;
        --color-orange-600: #d33f0e;
        --color-orange-700: #9e2f0a;
        --color-orange-800: #691f07;
        --color-orange-900: #351003;
        --color-orange-950: #180702;
        --color-teal-50: #e8f5f7;
        --color-teal-100: #d2ecef;
        --color-teal-200: #a1d7de;
        --color-teal-300: #73c3ce;
        --color-teal-400: #42aebd;
        --color-teal-500: #32838e;
        --color-teal-600: #286971;
        --color-teal-700: #1f5057;
        --color-teal-800: #143439;
        --color-teal-900: #0b1c1e;
        --color-teal-950: #050e0f;
        --color-darkviolet-50: #e8e8ed;
        --color-darkviolet-100: #d3d5de;
        --color-darkviolet-200: #a8aabd;
        --color-darkviolet-300: #7a7d9a;
        --color-darkviolet-400: #565971;
        --color-darkviolet-500: #353746;
        --color-darkviolet-600: #2a2b37;
        --color-darkviolet-700: #1f2029;
        --color-darkviolet-800: #16171d;
        --color-darkviolet-900: #0b0b0f;
        --color-darkviolet-950: #040506;
        --color-mud-50: #fefcfb;
        --color-mud-100: #fcf9f8;
        --color-mud-200: #f9f3f1;
        --color-mud-300: #f6ece9;
        --color-mud-400: #f3e6e2;
        --color-mud-500: #f0e0db;
        --color-mud-600: #d5a89a;
        --color-mud-700: #ba7059;
        --color-mud-800: #824836;
        --color-mud-900: #41241b;
        --color-mud-950: #20120d;
        --color-fanta-50: #ffffff;
        --color-fanta-100: #fffbfa;
        --color-fanta-200: #fffbfa;
        --color-fanta-300: #fff7f5;
        --color-fanta-400: #fff3f0;
        --color-fanta-500: #fff2ee;
        --color-fanta-600: #ffa58a;
        --color-fanta-700: #ff5b29;
        --color-fanta-800: #c72e00;
        --color-fanta-900: #611700;
        --color-fanta-950: #330c00;
        --color-pipe-50: #f8f2f2;
        --color-pipe-100: #f3e8e8;
        --color-pipe-200: #e6d0d0;
        --color-pipe-300: #dab9b9;
        --color-pipe-400: #cda2a2;
        --color-pipe-500: #c08989;
        --color-pipe-600: #aa5f5f;
        --color-pipe-700: #824545;
        --color-pipe-800: #562e2e;
        --color-pipe-900: #2b1717;
        --color-pipe-950: #140b0b;
        --color-mauve-50: #e8e7ee;
        --color-mauve-100: #d4d2e0;
        --color-mauve-200: #aaa5c0;
        --color-mauve-300: #7c759f;
        --color-mauve-400: #585275;
        --color-mauve-500: #363248;
        --color-mauve-600: #2b2839;
        --color-mauve-700: #201d2a;
        --color-mauve-800: #17151e;
        --color-mauve-900: #0b0a0f;
        --color-mauve-950: #050406;
        --color-violetta-50: #f2effa;
        --color-violetta-100: #e5e0f5;
        --color-violetta-200: #cac1eb;
        --color-violetta-300: #b0a2e2;
        --color-violetta-400: #9583d8;
        --color-violetta-500: #7c66cf;
        --color-violetta-600: #563bba;
        --color-violetta-700: #412c8c;
        --color-violetta-800: #2b1d5d;
        --color-violetta-900: #160f2f;
        --color-violetta-950: #0b0717;
        --color-crevice-50: #fefcfb;
        --color-crevice-100: #fcf5f3;
        --color-crevice-200: #f9efeb;
        --color-crevice-300: #f6e5df;
        --color-crevice-400: #f3dbd3;
        --color-crevice-500: #f0d3c9;
        --color-crevice-600: #dd9a83;
        --color-crevice-700: #ca623f;
        --color-crevice-800: #8c4027;
        --color-crevice-900: #441f13;
        --color-crevice-950: #24100a;
      }

      /* Tree specific styles - Keep these */
      .tj_container * {
        position: relative;
        box-sizing: border-box;
      }

      /* GitHub-style tree view */
      .tj_container ul {
        padding-left: 20px;
        list-style-type: none;
        margin: 0;
      }

      .tj_container > ul:first-of-type {
        padding: 0;
      }

      /* Add vertical lines to show parent-child relationships */
      .tj_container ul li {
        position: relative;
      }

      /* Vertical lines for parent-child relationships */
      .tj_container ul li:before {
        content: "";
        position: absolute;
        left: -12px;
        top: 0;
        width: 1px;
        height: 100%;
        background-color: var(--tree-connector-color); /* Use new variable */
        /* Opacity removed as color is adjusted directly */
      }

      /* Hide the vertical line for the first level */
      .tj_container > ul:first-of-type > li:before {
        display: none;
      }

      /* Horizontal connector lines */
      .tj_container ul li:after {
        content: "";
        position: absolute;
        left: -12px;
        top: 10px;
        width: 12px;
        height: 1px;
        background-color: var(--tree-connector-color); /* Use new variable */
        /* Opacity removed as color is adjusted directly */
      }

      /* Hide horizontal connector for first level */
      .tj_container > ul:first-of-type > li:after {
        display: none;
      }

      .tj_container li span.tj_description {
        cursor: pointer;
        padding: 2px 5px 2px 8px;
        display: block;
        color: var(--text-primary); /* Use theme variable */
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        width: 100%;
        font-size: 10pt;
        border-left: solid 4px transparent; /* Always reserve space for the indicator */

        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;

        text-align: left;
      }

      /* Full width hover effect */
      .tj_container li span.tj_description:hover {
        background-color: var(
          --tree-item-background-hover
        ); /* Use new variable */
        width: 100%;
      }

      .tj_container li span.tj_mod_icon,
      .tj_container li span.tj_icon {
        display: inline-block;
      }

      .tj_container li span.tj_mod_icon,
      .tj_container li span.tj_mod_icon * {
        width: 1em;
        height: 1em;
      }

      .tj_mod_icon > span {
        font-size: 12pt;
      }
      .tj_icon > span {
        font-size: 8pt;
      }

      .tj_container li span.tj_description.tj_leaf {
        padding-left: 1.5em;
        font-size: 10pt;
      }

      .tj_container li[disabled=""]:hover span.tj_description {
        cursor: default;
        background-color: var(
          --tree-item-background-disabled
        ); /* Use new variable */
        border-left-color: var(
          --tree-item-border-disabled
        ); /* Use new variable */
      }

      /* Selection indicator on the far left */
      .tj_container span.tj_description.selected {
        background-color: var(
          --tree-item-background-selected
        ); /* Use new variable */
        border-left-color: var(
          --tree-item-border-selected
        ); /* Use new variable */
      }

      .tj_container span.tj_description.selected:hover {
        background-color: var(
          --tree-item-background-selected
        ); /* Use new variable */
        border-left-color: var(
          --tree-item-border-selected
        ); /* Use new variable */
      }

      /* Define theme variables directly based on data-theme - These will be applied by the script */
      [data-theme="light"] {
        --text-primary: var(--color-black-900);
        --text-secondary: var(--color-black-700);
        --text-link: var(--color-purple-500);
        --interactive-subtle: var(--color-tan-500);
        --border-strong: var(--color-pipe-500);
        --background-header: var(--color-fanta-500);
        --background-row: var(--color-tan-200);
        --background-button-primary: var(--color-red-300);
        --accent-brand: var(--color-red-500);
        --background-primary: var(--color-mud-500);
        --background-secondary: var(--color-mud-500); /* Tree/Details bg */
        --status-success: #09983a;
        --background-highlight-primary: var(--color-tan-50);
        --background-highlight-secondary: var(--color-tan-200);
        --background-highlight-tertiary: var(--color-tan-100);

        /* Tree specific semantic variables */
        --tree-connector-color: var(--color-black-200);
        --tree-item-background-hover: var(--color-tan-100);
        --tree-item-background-selected: var(--color-crevice-500);
        --tree-item-border-selected: var(--color-pipe-500);
        --tree-item-background-disabled: var(--color-tan-100);
        --tree-item-border-disabled: var(--color-black-300);

        /* Metadata specific semantic variables */
        --metadata-key-color: var(--color-black-700);
        --metadata-value-color: var(--color-black-900);
        --metadata-section-background: var(--color-tan-100);
        --metadata-array-background: var(--color-mud-200);
        --metadata-array-header-color: var(--color-black-900);
        --metadata-object-background: var(--color-mud-500);
      }

      [data-theme="dark"] {
        --text-primary: var(--color-tan-50);
        --text-secondary: var(--color-purple-200);
        --text-link: var(--color-tan-50);
        --interactive-subtle: var(--color-purple-300);
        --border-strong: var(--color-purple-400);
        --background-header: var(--color-darkviolet-500);
        --background-row: var(--color-purple-800);
        --background-button-primary: var(--color-purple-500);
        --accent-brand: var(--color-violetta-500);
        --background-primary: var(--color-black-900);
        --background-secondary: var(--color-purple-900);
        --status-success: #50d37d;
        --background-highlight-primary: var(--color-black-800);
        --background-highlight-secondary: var(--color-brown-800);
        --background-highlight-tertiary: var(--color-brown-900);

        /* Tree specific semantic variables */
        --tree-connector-color: var(--color-purple-500);
        --tree-item-background-hover: var(--color-purple-700);
        --tree-item-background-selected: var(--color-purple-600);
        --tree-item-border-selected: var(--color-purple-200);
        --tree-item-background-disabled: var(--color-purple-800);
        --tree-item-border-disabled: var(--color-purple-600);

        /* Metadata specific semantic variables */
        --metadata-key-color: var(--color-purple-200);
        --metadata-value-color: var(--color-tan-50);
        --metadata-section-background: var(--color-purple-800);
        --metadata-array-background: var(--color-purple-700);
        --metadata-array-header-color: var(--color-tan-50);
        --metadata-object-background: var(--color-purple-900);
      }

      /* Logo Styling for Light/Dark Mode */
      .logo-light {
        display: none; /* Hidden by default */
      }
      .logo-dark {
        display: inline-block; /* Shown by default */
      }

      [data-theme="light"] .logo-light {
        display: inline-block;
      }
      [data-theme="light"] .logo-dark {
        display: none;
      }

      [data-theme="dark"] .logo-light {
        display: none;
      }
      [data-theme="dark"] .logo-dark {
        display: inline-block;
      }

      /* Ensure both logos have the same base styles */
      .logo-light,
      .logo-dark {
        height: 1em;
        vertical-align: middle; /* Adjust vertical alignment */
      }
    </style>
    <script>
      // Get user's theme preference from localStorage or system preference
      function getThemePreference() {
        const savedTheme = localStorage.getItem("theme");
        if (savedTheme) {
          return savedTheme;
        }

        // Check for system preference and return light or dark directly
        if (
          window.matchMedia &&
          window.matchMedia("(prefers-color-scheme: dark)").matches
        ) {
          return "dark";
        }

        return "light"; // Default to light
      }

      // Set initial theme
      const initialTheme = getThemePreference();
      document.documentElement.setAttribute("data-theme", initialTheme);

      // Function to get computed CSS variables for Tailwind
      function getThemeColors() {
        // Get all semantic color variables from CSS
        const computedStyle = getComputedStyle(document.documentElement);
        const semanticVars = [
          "text-primary",
          "text-secondary",
          "text-link",
          "interactive-subtle",
          "border-strong",
          "background-header",
          "background-row",
          "background-button-primary",
          "accent-brand",
          "status-success",
          "background-primary",
          "background-secondary",
          "background-highlight-primary",
          "background-highlight-secondary",
          "background-highlight-tertiary",
          "metadata-key-color",
          "metadata-value-color",
          "metadata-section-background",
          "metadata-array-background",
          "metadata-array-header-color",
          "metadata-object-background",
          "tree-connector-color",
          "tree-item-background-hover",
          "tree-item-background-selected",
          "tree-item-border-selected",
          "tree-item-background-disabled",
          "tree-item-border-disabled",
        ];

        // Create an object with all the computed values
        const colors = {};
        semanticVars.forEach((varName) => {
          // Get the value from CSS
          const value = computedStyle.getPropertyValue(`--${varName}`).trim();
          // Add to colors object
          colors[varName] = value;
        });

        return colors;
      }

      // Apply theme colors based on preference
      function applyThemeColors() {
        // Get computed colors from CSS variables
        const colors = getThemeColors();

        // Configure Tailwind with the selected theme colors
        tailwind.config = {
          theme: {
            extend: {
              colors: colors,
            },
          },
        };
      }

      // Apply initial theme
      applyThemeColors();
    </script>
  </head>
  <body class="font-sans m-0 p-0 bg-background-primary h-screen flex flex-col">
    <!-- Menubar -->
    <div
      class="flex justify-between items-center bg-background-header p-4 border-b border-accent-brand"
    >
      <div class="text-text-primary text-lg">
        <!-- Light mode logo -->
        <img
          src="https://cdn.glitch.global/1f44bda7-6694-4547-8f1b-1fa1f48b5711/light_logo.png?v=1743423313930"
          alt="Logo Light"
          class="logo-light"
        />
        <!-- Dark mode logo -->
        <img
          src="https://cdn.glitch.global/1f44bda7-6694-4547-8f1b-1fa1f48b5711/canyon.png?v=1743423174793"
          alt="Logo Dark"
          class="logo-dark"
        />
      </div>
      <div class="flex items-center gap-4">
        <select
          id="theme-selector"
          class="bg-background-header text-text-primary border border-border-strong rounded py-1 px-2 text-sm"
        >
          <option value="light">🌝</option>
          <option value="dark">🌚</option>
        </select>
        <div
          class="text-text-link text-md cursor-not-allowed"
          title="We're still working on our docs."
        >
          Documentation
        </div>
      </div>
    </div>

    <div
      class="flex flex-col flex-1 transition-all duration-500 overflow-hidden p-4"
    >
      <script>
        // Theme switching functionality
        document.addEventListener("DOMContentLoaded", function () {
          const themeSelector = document.getElementById("theme-selector");

          // Set the dropdown to match the current theme
          themeSelector.value = getThemePreference();

          // Listen for theme changes
          themeSelector.addEventListener("change", function () {
            const selectedTheme = this.value;
            document.documentElement.setAttribute("data-theme", selectedTheme);
            localStorage.setItem("theme", selectedTheme);
            applyThemeColors();

            // Force redraw of the page to apply new theme
            document.body.style.display = "none";
            setTimeout(() => {
              document.body.style.display = "";
            }, 5);
          });

          // Listen for system theme changes and update if no saved preference
          if (window.matchMedia) {
            window
              .matchMedia("(prefers-color-scheme: dark)")
              .addEventListener("change", function (e) {
                // Only apply system preference if there's no saved theme
                if (!localStorage.getItem("theme")) {
                  // Set theme based on new system preference
                  const newTheme = e.matches ? "dark" : "light";
                  document.documentElement.setAttribute("data-theme", newTheme);
                  themeSelector.value = newTheme;
                  applyThemeColors();

                  // Force redraw
                  document.body.style.display = "none";
                  setTimeout(() => {
                    document.body.style.display = "";
                  }, 5);
                }
              });
          }
        });
      </script>
      <div
        id="resizable-grid"
        class="grid gap-1 h-full"
        style="grid-template-columns: 1fr 8px 4fr"
      >
        <div
          id="tree-column"
          class="h-full overflow-hidden border rounded-md border-border-strong"
        >
          <div
            id="tree-container"
            class="p-4 w-full h-full overflow-scroll scrollbar-transparent"
          ></div>
        </div>
        <div
          id="resize-handle"
          class="w-2 h-full cursor-col-resize bg-border-strong rounded-md opacity-10 hover:opacity-100 transition-opacity duration-200 ease-in-out z-10"
        ></div>
        <div id="details-column" class="h-full overflow-hidden">
          <div
            class="overflow-scroll scrollbar-transparent h-full border rounded-md border-border-strong p-4"
          >
            <h1 class="text-3xl text-text-primary mb-4 node-name"></h1>
            <div id="node-metadata" class=""></div>

            <!-- Hidden Metadata Templates -->
            <div id="metadata-templates" style="display: none">
              <!-- Template for 'org' -->
              <div id="template-org">
                <div class="space-y-2">
                  <!-- Changed from grid to space-y -->
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      ID:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="id"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Created At:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="created_at"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Members:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="members"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Teams:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="teams"
                    ></div>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">Compliance</h3>
                  <div
                    data-metadata-array="compliance"
                    class="flex flex-wrap gap-2"
                  >
                    <!-- Compliance items will be added here -->
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div, added padding/margin -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <!-- Key above -->
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                        <!-- Value below -->
                      </div>
                    </template>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">External Links</h3>
                  <div data-metadata-array="external_links" class="space-y-1">
                    <template data-array-item-template>
                      <div>
                        <a
                          data-metadata-key="service"
                          href="#"
                          target="_blank"
                          class="text-text-link underline"
                        ></a>
                        (<span class="text-xs text-text-secondary"
                          >Checked:
                          <span
                            class="text-text-secondary"
                            data-metadata-key="last_check"
                          ></span></span
                        >)
                      </div>
                    </template>
                  </div>
                </div>
              </div>

              <!-- Template for 'app' -->
              <div id="template-app">
                <div class="space-y-2">
                  <!-- Changed from grid to space-y -->
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      ID:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="id"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Uptime:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="uptime"
                    ></div>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">Deployments</h3>
                  <div
                    data-metadata-array="deployments"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">Performance</h3>
                  <div
                    data-metadata-array="performance"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">External Links</h3>
                  <div data-metadata-array="external_links" class="space-y-1">
                    <template data-array-item-template>
                      <div>
                        <a
                          data-metadata-key="service"
                          href="#"
                          target="_blank"
                          class="text-text-link underline"
                        ></a>
                        (<span class="text-xs text-text-secondary"
                          >Checked:
                          <span
                            class="text-text-secondary"
                            data-metadata-key="last_check"
                          ></span></span
                        >)
                      </div>
                    </template>
                  </div>
                </div>
              </div>

              <!-- Template for 'env_type' -->
              <div id="template-env_type">
                <div class="space-y-2">
                  <!-- Changed from grid to space-y -->
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      ID:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="id"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Description:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="description"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Auto Scaling:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="auto_scaling"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      High Availability:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="high_availability"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Backup Enabled:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="backup_enabled"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Compliance Level:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="compliance_level"
                    ></div>
                  </div>
                </div>
              </div>

              <!-- Template for 'env' -->
              <div id="template-env">
                <div class="space-y-2">
                  <!-- Changed from grid to space-y -->
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      ID:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="id"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Status:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="status"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Region:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="region"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Created At:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="created_at"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Last Updated:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="last_updated"
                    ></div>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">Compliance</h3>
                  <div
                    data-metadata-array="compliance"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">Security</h3>
                  <div
                    data-metadata-array="security"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">Cost</h3>
                  <div data-metadata-array="cost" class="flex flex-wrap gap-2">
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">
                    Costs By Resource
                  </h3>
                  <div
                    data-metadata-array="costs_by_resource"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">External Links</h3>
                  <div data-metadata-array="external_links" class="space-y-1">
                    <template data-array-item-template>
                      <div>
                        <a
                          data-metadata-key="service"
                          href="#"
                          target="_blank"
                          class="text-text-link underline"
                        ></a>
                        (<span class="text-xs text-text-secondary"
                          >Checked:
                          <span
                            class="text-text-secondary"
                            data-metadata-key="last_check"
                          ></span></span
                        >)
                      </div>
                    </template>
                  </div>
                </div>
              </div>

              <!-- Template for 'workload' -->
              <div id="template-workload">
                <div class="space-y-2">
                  <!-- Changed from grid to space-y -->
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      ID:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="id"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Type:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="type"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Status:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="status"
                    ></div>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">Replicas</h3>
                  <div
                    data-metadata-array="replicas"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">CPU</h3>
                  <div data-metadata-array="cpu" class="flex flex-wrap gap-2">
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">Memory</h3>
                  <div
                    data-metadata-array="memory"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">Metrics</h3>
                  <div
                    data-metadata-array="metrics"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">Health Checks</h3>
                  <div
                    data-metadata-array="health_checks"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">External Links</h3>
                  <div data-metadata-array="external_links" class="space-y-1">
                    <template data-array-item-template>
                      <div>
                        <a
                          data-metadata-key="service"
                          href="#"
                          target="_blank"
                          class="text-text-link underline"
                        ></a>
                        (<span class="text-xs text-text-secondary"
                          >Checked:
                          <span
                            class="text-text-secondary"
                            data-metadata-key="last_check"
                          ></span></span
                        >)
                      </div>
                    </template>
                  </div>
                </div>
              </div>

              <!-- Template for 'resource' -->
              <div id="template-resource">
                <!-- Generic resource fields -->
                <div class="space-y-2 mb-4">
                  <!-- Changed from grid to space-y -->
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      ID:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="id"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Type:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="type"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Status:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="status"
                    ></div>
                  </div>
                </div>
                <!-- Specific fields will be added dynamically based on resource type if needed, or use sub-templates -->
                <!-- Example: S3 specific -->
                <div data-resource-type="s3" style="display: none">
                  <h3 class="text-metadata-key-color mb-2">S3 Metrics</h3>
                  <div
                    data-metadata-array="metrics"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                  <h3 class="text-metadata-key-color mt-4 mb-2">
                    S3 Performance
                  </h3>
                  <div
                    data-metadata-array="performance"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                  <h3 class="text-metadata-key-color mt-4 mb-2">S3 Cost</h3>
                  <div data-metadata-array="cost" class="flex flex-wrap gap-2">
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                  <h3 class="text-metadata-key-color mt-4 mb-2">
                    S3 Compliance
                  </h3>
                  <div
                    data-metadata-array="compliance"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <!-- Example: DB specific -->
                <div data-resource-type="db" style="display: none">
                  <div class="space-y-2 mb-4">
                    <!-- Changed from grid to space-y -->
                    <div>
                      <div class="text-metadata-key-color text-xs font-medium">
                        Version:
                      </div>
                      <div
                        class="text-metadata-value-color"
                        data-metadata-key="version"
                      ></div>
                    </div>
                    <div>
                      <div class="text-metadata-key-color text-xs font-medium">
                        Size:
                      </div>
                      <div
                        class="text-metadata-value-color"
                        data-metadata-key="size"
                      ></div>
                    </div>
                  </div>
                  <h3 class="text-metadata-key-color mb-2">DB Connections</h3>
                  <div
                    data-metadata-array="connections"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                  <h3 class="text-metadata-key-color mt-4 mb-2">
                    DB Performance
                  </h3>
                  <div
                    data-metadata-array="performance"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                  <h3 class="text-metadata-key-color mt-4 mb-2">DB Storage</h3>
                  <div
                    data-metadata-array="storage"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                  <h3 class="text-metadata-key-color mt-4 mb-2">DB Backups</h3>
                  <div
                    data-metadata-array="backups"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <!-- Example: Redis specific -->
                <div data-resource-type="redis" style="display: none">
                  <div class="space-y-2 mb-4">
                    <!-- Added space-y -->
                    <div>
                      <div class="text-metadata-key-color text-xs font-medium">
                        Version:
                      </div>
                      <div
                        class="text-metadata-value-color"
                        data-metadata-key="version"
                      ></div>
                    </div>
                  </div>
                  <h3 class="text-metadata-key-color mt-4 mb-2">
                    Redis Connections
                  </h3>
                  <div
                    data-metadata-array="connections"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                  <h3 class="text-metadata-key-color mt-4 mb-2">
                    Redis Performance
                  </h3>
                  <div
                    data-metadata-array="performance"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                  <h3 class="text-metadata-key-color mt-4 mb-2">
                    Redis Memory
                  </h3>
                  <div
                    data-metadata-array="memory"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <!-- Generic Resource Fields -->
                <div data-resource-type="generic" style="display: none">
                  <div class="space-y-2 mb-4">
                    <!-- Changed from grid to space-y -->
                    <div>
                      <div class="text-metadata-key-color text-xs font-medium">
                        Created At:
                      </div>
                      <div
                        class="text-metadata-value-color"
                        data-metadata-key="created_at"
                      ></div>
                    </div>
                    <div>
                      <div class="text-metadata-key-color text-xs font-medium">
                        Last Accessed:
                      </div>
                      <div
                        class="text-metadata-value-color"
                        data-metadata-key="last_accessed"
                      ></div>
                    </div>
                  </div>
                  <h3 class="text-metadata-key-color mb-2">Generic Metrics</h3>
                  <div
                    data-metadata-array="metrics"
                    class="flex flex-wrap gap-2"
                  >
                    <template data-array-item-template>
                      <div
                        class="bg-metadata-array-background p-2 rounded text-sm mb-1"
                      >
                        <!-- Changed span to div -->
                        <div
                          class="text-metadata-key-color text-xs font-medium"
                          data-metadata-key="key"
                        ></div>
                        <div
                          class="text-metadata-value-color"
                          data-metadata-key="value"
                        ></div>
                      </div>
                    </template>
                  </div>
                </div>
                <!-- Common External Links -->
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">External Links</h3>
                  <div data-metadata-array="external_links" class="space-y-1">
                    <template data-array-item-template>
                      <div>
                        <a
                          data-metadata-key="service"
                          href="#"
                          target="_blank"
                          class="text-text-link underline"
                        ></a>
                        (<span class="text-xs text-text-secondary"
                          >Checked:
                          <span
                            class="text-text-secondary"
                            data-metadata-key="last_check"
                          ></span></span
                        >)
                      </div>
                    </template>
                  </div>
                </div>
              </div>

              <!-- Template for 'other' -->
              <div id="template-other">
                <div class="space-y-2">
                  <!-- Changed from grid to space-y -->
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      ID:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="id"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Name:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="name"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Description:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="description"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Created At:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="created_at"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Last Updated:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="last_updated"
                    ></div>
                  </div>
                  <div>
                    <div class="text-metadata-key-color text-xs font-medium">
                      Status:
                    </div>
                    <div
                      class="text-metadata-value-color"
                      data-metadata-key="status"
                    ></div>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">Tags</h3>
                  <div data-metadata-array="tags" class="flex flex-wrap gap-2">
                    <template data-array-item-template>
                      <span
                        class="bg-metadata-array-background p-1 rounded text-sm text-metadata-value-color"
                        data-metadata-key="value"
                      ></span>
                    </template>
                  </div>
                </div>
                <div class="mt-4">
                  <h3 class="text-metadata-key-color mb-2">External Links</h3>
                  <div data-metadata-array="external_links" class="space-y-1">
                    <template data-array-item-template>
                      <div>
                        <a
                          data-metadata-key="service"
                          href="#"
                          target="_blank"
                          class="text-text-link underline"
                        ></a>
                        (<span class="text-xs text-text-secondary"
                          >Checked:
                          <span
                            class="text-text-secondary"
                            data-metadata-key="last_check"
                          ></span></span
                        >)
                      </div>
                    </template>
                  </div>
                </div>
              </div>
            </div>
            <!-- End Hidden Metadata Templates -->
          </div>
        </div>
      </div>
    </div>
    <script>
      // Data
      const data = {{ toRawJsonJs . }};

      // Store pre-generated metadata for each node
      const nodeMetadataMap = new Map();

      // Function to generate random metadata based on object class
      const generateMetadata = (node) => {
        const userObject = node.getUserObject();
        const nodeClass = userObject.class;
        const nodeName = userObject.name;

        if (!nodeClass) {
          return null; // No metadata for objects without a class
        }

        // Helper function to get a random number between min and max
        const randomNumber = (min, max, decimals = 0) => {
          const num = Math.random() * (max - min) + min;
          return decimals === 0
            ? Math.floor(num)
            : Number(num.toFixed(decimals));
        };

        // Helper function to get a random date within the last 30 days
        const randomRecentDate = () => {
          const now = new Date();
          const daysAgo = randomNumber(0, 30);
          const date = new Date(now.getTime() - daysAgo * 24 * 60 * 60 * 1000);
          return date.toISOString();
        };

        // Helper function to get a random date within a specific range
        const randomDateInRange = (startYear, endYear) => {
          const year = randomNumber(startYear, endYear);
          const month = randomNumber(1, 12);
          const day = randomNumber(1, 28);
          return `${year}-${String(month).padStart(2, "0")}-${String(
            day
          ).padStart(2, "0")}T00:00:00Z`;
        };

        // Helper function to get a random element from an array
        const randomElement = (array) => {
          return array[Math.floor(Math.random() * array.length)];
        };

        // Helper function to generate external service links
        const generateExternalLinks = (nodeType, id) => {
          // Define possible external services based on node type
          const servicesByType = {
            org: [
              "DataDog",
              "Snyk",
              "Wiz",
              "Splunk",
              "PagerDuty",
              "GitHub Enterprise",
              "GitLab Enterprise",
              "ServiceNow",
              "Jira",
              "Confluence",
              "Okta",
              "SonarQube",
              "Artifactory",
              "Nexus",
              "Dynatrace",
            ],
            app: [
              "DataDog",
              "Snyk",
              "Wiz",
              "Splunk",
              "PagerDuty",
              "GitHub Enterprise",
              "GitLab Enterprise",
              "Jenkins",
              "CircleCI",
              "ArgoCD",
              "Harness",
              "Spinnaker",
              "New Relic",
              "AppDynamics",
              "Dynatrace",
              "Sentry",
              "Grafana",
            ],
            env: [
              "DataDog",
              "Snyk",
              "Wiz",
              "Splunk",
              "PagerDuty",
              "AWS Console",
              "GCP Console",
              "Azure Portal",
              "Terraform Cloud",
              "CloudHealth",
              "CloudCheckr",
              "Prisma Cloud",
              "Lacework",
              "Aqua Security",
            ],
            workload: [
              "DataDog",
              "Snyk",
              "Wiz",
              "Splunk",
              "Kubernetes Dashboard",
              "ArgoCD",
              "Prometheus",
              "Grafana",
              "Istio",
              "Linkerd",
              "Jaeger",
              "Kiali",
              "Sysdig",
              "Dynatrace",
            ],
            resource: [
              "DataDog",
              "Splunk",
              "AWS Console",
              "GCP Console",
              "Azure Portal",
              "Grafana",
              "Prometheus",
              "Elasticsearch",
              "Kibana",
              "MongoDB Atlas",
              "Snowflake",
              "Databricks",
              "Confluent Cloud",
              "Redis Enterprise",
            ],
          };

          // Get relevant services for this node type or use a default set
          const relevantServices = servicesByType[nodeType] || [
            "DataDog",
            "Snyk",
            "Wiz",
            "Splunk",
          ];

          // Select a random number of services (between 3 and 6 for enterprise)
          const numServices = randomNumber(
            3,
            Math.min(6, relevantServices.length)
          );

          // Shuffle and take the first numServices elements
          const selectedServices = [...relevantServices]
            .sort(() => 0.5 - Math.random())
            .slice(0, numServices);

          // Generate links for each selected service
          return selectedServices.map((service) => {
            // Generate a plausible URL based on the service
            let url;
            switch (service) {
              case "DataDog":
                url = `https://app.datadoghq.com/dashboard/enterprise-${randomNumber(
                  100000,
                  999999
                )}/${id}`;
                break;
              case "Snyk":
                url = `https://app.snyk.io/org/enterprise-canyon/project/${randomNumber(
                  10000,
                  99999
                )}`;
                break;
              case "Wiz":
                url = `https://app.wiz.io/enterprise/projects/${id}`;
                break;
              case "Splunk":
                url = `https://splunk.enterprise.canyon.com/en-US/app/search/search?q=${id}`;
                break;
              case "PagerDuty":
                url = `https://enterprise-canyon.pagerduty.com/service-directory/${randomNumber(
                  10000,
                  99999
                )}`;
                break;
              case "GitHub Enterprise":
                url = `https://github.enterprise.canyon.com/${id}`;
                break;
              case "GitLab Enterprise":
                url = `https://gitlab.enterprise.canyon.com/canyon/${id}`;
                break;
              case "Jenkins":
                url = `https://jenkins.enterprise.canyon.com/job/${id}/`;
                break;
              case "CircleCI":
                url = `https://app.circleci.com/pipelines/enterprise/canyon/${id}`;
                break;
              case "AWS Console":
                url = `https://console.aws.amazon.com/console/home?region=us-east-1#${nodeType}/${id}`;
                break;
              case "GCP Console":
                url = `https://console.cloud.google.com/${nodeType}/${id}`;
                break;
              case "Azure Portal":
                url = `https://portal.azure.com/#@canyon.onmicrosoft.com/resource/${id}`;
                break;
              case "Kubernetes Dashboard":
                url = `https://k8s.enterprise.canyon.com/#!/${nodeType}/${id}`;
                break;
              case "ArgoCD":
                url = `https://argocd.enterprise.canyon.com/applications/${id}`;
                break;
              case "Prometheus":
                url = `https://prometheus.enterprise.canyon.com/graph?g0.expr=${id}`;
                break;
              case "Grafana":
                url = `https://grafana.enterprise.canyon.com/d/enterprise-${randomNumber(
                  10000,
                  99999
                )}/${id}`;
                break;
              case "ServiceNow":
                url = `https://canyon.service-now.com/nav_to.do?uri=cmdb_ci_service.do?sys_id=${randomNumber(
                  10000,
                  99999
                )}`;
                break;
              case "Jira":
                url = `https://canyon.atlassian.net/browse/CANYON-${randomNumber(
                  1000,
                  9999
                )}`;
                break;
              case "Confluence":
                url = `https://canyon.atlassian.net/wiki/spaces/CANYON/pages/${randomNumber(
                  10000000,
                  99999999
                )}`;
                break;
              case "Okta":
                url = `https://canyon.okta.com/admin/app/${randomNumber(
                  10000,
                  99999
                )}`;
                break;
              case "SonarQube":
                url = `https://sonar.enterprise.canyon.com/dashboard?id=${id}`;
                break;
              case "Artifactory":
                url = `https://artifactory.enterprise.canyon.com/ui/repos/tree/General/${id}`;
                break;
              case "Nexus":
                url = `https://nexus.enterprise.canyon.com/#browse/browse:${id}`;
                break;
              case "Dynatrace":
                url = `https://abc12345.live.dynatrace.com/#dashboard;id=${randomNumber(
                  10000,
                  99999
                )}`;
                break;
              case "New Relic":
                url = `https://one.newrelic.com/nr1-core/apm/application/${randomNumber(
                  10000,
                  99999
                )}`;
                break;
              case "AppDynamics":
                url = `https://canyon.saas.appdynamics.com/controller/#/location=APP_DASHBOARD&application=${randomNumber(
                  10000,
                  99999
                )}`;
                break;
              case "Sentry":
                url = `https://canyon.sentry.io/issues/?project=${randomNumber(
                  10000,
                  99999
                )}`;
                break;
              case "Terraform Cloud":
                url = `https://app.terraform.io/app/canyon/workspaces/${id}`;
                break;
              case "CloudHealth":
                url = `https://apps.cloudhealthtech.com/assets/${randomNumber(
                  10000,
                  99999
                )}`;
                break;
              case "CloudCheckr":
                url = `https://app.cloudcheckr.com/Resource/ResourceDetail?resourceId=${randomNumber(
                  10000,
                  99999
                )}`;
                break;
              case "Prisma Cloud":
                url = `https://app.prismacloud.io/resources?resource=${id}`;
                break;
              case "Lacework":
                url = `https://canyon.lacework.net/ui/investigation/resources/${randomNumber(
                  10000,
                  99999
                )}`;
                break;
              case "Aqua Security":
                url = `https://cloud.aquasec.com/containers/${randomNumber(
                  10000,
                  99999
                )}`;
                break;
              case "Istio":
                url = `https://istio.enterprise.canyon.com/kiali/console/graph/namespaces/?namespaces=${id}`;
                break;
              case "Linkerd":
                url = `https://linkerd.enterprise.canyon.com/namespaces/${id}`;
                break;
              case "Jaeger":
                url = `https://jaeger.enterprise.canyon.com/search?service=${id}`;
                break;
              case "Kiali":
                url = `https://kiali.enterprise.canyon.com/console/graph/namespaces/?namespaces=${id}`;
                break;
              case "Sysdig":
                url = `https://app.sysdigcloud.com/#/events/l:${randomNumber(
                  10000,
                  99999
                )}`;
                break;
              case "Elasticsearch":
                url = `https://elasticsearch.enterprise.canyon.com/_dashboards/app/discover#/?_g=()`;
                break;
              case "Kibana":
                url = `https://kibana.enterprise.canyon.com/app/kibana#/discover?_g=()`;
                break;
              case "MongoDB Atlas":
                url = `https://cloud.mongodb.com/v2/projects/${randomNumber(
                  10000,
                  99999
                )}/clusters`;
                break;
              case "Snowflake":
                url = `https://app.snowflake.com/canyon/data/databases/${id}`;
                break;
              case "Databricks":
                url = `https://canyon.cloud.databricks.com/?o=${randomNumber(
                  10000,
                  99999
                )}`;
                break;
              case "Confluent Cloud":
                url = `https://confluent.cloud/environments/${randomNumber(
                  10000,
                  99999
                )}/clusters`;
                break;
              case "Redis Enterprise":
                url = `https://app.redislabs.com/#/subscriptions/${randomNumber(
                  10000,
                  99999
                )}/bdb`;
                break;
              default:
                url = `https://${service.toLowerCase()}.enterprise.canyon.com/${id}`;
            }

            return {
              service: service,
              url: url,
              last_check: randomRecentDate(),
            };
          });
        };

        // Generate metadata based on class
        switch (nodeClass) {
          case "org":
            const orgId = `enterprise-${nodeName
              .toLowerCase()
              .replace(/\s+/g, "-")}`;
            return {
              id: orgId,
              name: nodeName,
              created_at: randomDateInRange(2015, 2020),
              members: randomNumber(500, 15000),
              teams: randomNumber(50, 200),
              compliance: [
                { gdpr: randomElement(["compliant", "in-progress"]) },
                { hipaa: randomElement(["compliant", "in-progress"]) },
                { sox: randomElement(["compliant", "in-progress"]) },
                { pci_dss: randomElement(["compliant", "in-progress"]) },
                { iso_27001: randomElement(["compliant", "in-progress"]) },
                { nist_800_53: randomElement(["compliant", "in-progress"]) },
                {
                  fedramp: randomElement([
                    "high",
                    "moderate",
                    "in-progress",
                    "not-applicable",
                  ]),
                },
              ],
              external_links: generateExternalLinks("org", orgId),
            };

          case "app":
            const appId = nodeName.toLowerCase().replace(/\s+/g, "-");
            return {
              id: appId,
              uptime: `${randomNumber(90, 365)}d ${randomNumber(
                0,
                23
              )}h ${randomNumber(0, 59)}m`,
              deployments: [
                { total: randomNumber(500, 5000) },
                { successful: randomNumber(495, 4990) },
                { failed: randomNumber(5, 20) },
                { last_deployment: randomRecentDate() },
                {
                  deployment_frequency: randomElement([
                    "multiple times per day",
                    "daily",
                    "weekly",
                  ]),
                },
                {
                  lead_time: randomElement(["< 1 hour", "< 1 day", "< 1 week"]),
                },
                {
                  mean_time_to_recovery: randomElement([
                    "< 1 hour",
                    "< 4 hours",
                    "< 24 hours",
                  ]),
                },
              ],
              performance: [
                { response_time_avg_ms: randomNumber(20, 200) },
                { error_rate: randomNumber(0, 1, 4) },
                { availability: randomNumber(99.9, 100, 4) },
                { apdex_score: randomNumber(95, 100, 2) / 100 },
                { p95_latency_ms: randomNumber(50, 500) },
                { p99_latency_ms: randomNumber(100, 1000) },
                { requests_per_minute: randomNumber(1000, 100000) },
              ],
              dependencies: [
                randomElement([
                  "payment-gateway",
                  "fraud-detection",
                  "customer-database",
                  "notification-service",
                  "authentication-service",
                  "logging-service",
                  "metrics-service",
                  "search-service",
                  "recommendation-engine",
                  "content-delivery-network",
                ]),
                randomElement([
                  "payment-gateway",
                  "fraud-detection",
                  "customer-database",
                  "notification-service",
                  "authentication-service",
                  "logging-service",
                  "metrics-service",
                  "search-service",
                  "recommendation-engine",
                  "content-delivery-network",
                ]),
                randomElement([
                  "payment-gateway",
                  "fraud-detection",
                  "customer-database",
                  "notification-service",
                  "authentication-service",
                  "logging-service",
                  "metrics-service",
                  "search-service",
                  "recommendation-engine",
                  "content-delivery-network",
                ]),
                randomElement([
                  "payment-gateway",
                  "fraud-detection",
                  "customer-database",
                  "notification-service",
                  "authentication-service",
                  "logging-service",
                  "metrics-service",
                  "search-service",
                  "recommendation-engine",
                  "content-delivery-network",
                ]),
              ],
              external_links: generateExternalLinks("app", appId),
            };

          case "env_type":
            return {
              id: nodeName.toLowerCase().replace(/\s+/g, "-"),
              description: `${nodeName} environment type for enterprise workloads`,
              auto_scaling: randomElement([true, false]),
              high_availability: randomElement([true, false]),
              backup_enabled: true,
              compliance_level: randomElement(["standard", "high", "maximum"]),
              multi_region: randomElement([true, false]),
              disaster_recovery: randomElement([
                "active-active",
                "active-passive",
                "pilot-light",
                "warm-standby",
              ]),
              data_classification: randomElement([
                "public",
                "internal",
                "confidential",
                "restricted",
              ]),
              sla: randomElement(["99.9%", "99.95%", "99.99%", "99.999%"]),
              maintenance_window: randomElement([
                "Sundays 01:00-05:00 UTC",
                "Saturdays 22:00-02:00 UTC",
                "Wednesdays 03:00-07:00 UTC",
              ]),
            };

          case "env":
            const envId = nodeName.toLowerCase().replace(/\s+/g, "-");
            return {
              id: envId,
              status: randomElement(["operational", "degraded", "maintenance"]),
              region: randomElement([
                "us-east-1",
                "us-west-2",
                "eu-central-1",
                "eu-west-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "sa-east-1",
                "ca-central-1",
                "ap-south-1",
                "ap-east-1",
                "me-south-1",
                "af-south-1",
              ]),
              created_at: randomDateInRange(2020, 2024),
              last_updated: randomRecentDate(),
              compliance: [
                { pci_dss: randomElement(["compliant", "not-applicable"]) },
                { gdpr: randomElement(["compliant", "in-progress"]) },
                { sox: randomElement(["compliant", "not-applicable"]) },
                {
                  hipaa: randomElement([
                    "compliant",
                    "in-progress",
                    "not-applicable",
                  ]),
                },
                { iso_27001: randomElement(["compliant", "in-progress"]) },
                { nist_800_53: randomElement(["compliant", "in-progress"]) },
                {
                  fedramp: randomElement([
                    "high",
                    "moderate",
                    "in-progress",
                    "not-applicable",
                  ]),
                },
              ],
              security: [
                { vulnerability_count: randomNumber(0, 10) },
                { critical_issues: randomNumber(0, 2) },
                { high_issues: randomNumber(0, 5) },
                { medium_issues: randomNumber(1, 15) },
                { low_issues: randomNumber(5, 30) },
                { last_security_scan: randomRecentDate() },
                { next_scheduled_scan: randomRecentDate() },
                { security_score: randomNumber(85, 100) + "%" },
              ],
              cost: [
                { monthly_estimate: randomNumber(50000, 500000) },
                { currency: "USD" },
                { year_over_year_change: randomNumber(-15, 25, 1) + "%" },
                { forecast_next_month: randomNumber(50000, 550000) },
                {
                  budget_status: randomElement([
                    "under budget",
                    "on track",
                    "over budget",
                  ]),
                },
              ],
              costs_by_resource: [
                { compute: randomNumber(20000, 200000) },
                { storage: randomNumber(10000, 100000) },
                { network: randomNumber(5000, 50000) },
                { managed_services: randomNumber(5000, 50000) },
                { databases: randomNumber(10000, 100000) },
                { analytics: randomNumber(5000, 50000) },
                { security_services: randomNumber(5000, 30000) },
                { monitoring: randomNumber(5000, 30000) },
              ],
              external_links: generateExternalLinks("env", envId),
            };

          case "workload":
            const workloadId = nodeName;
            return {
              id: workloadId,
              type: randomElement([
                "stateful",
                "stateless",
                "job",
                "cronjob",
                "daemonset",
              ]),
              status: randomElement([
                "running",
                "degraded",
                "starting",
                "restarting",
                "scaling",
              ]),
              replicas: [
                { desired: randomNumber(3, 20) },
                { available: randomNumber(3, 20) },
                { unavailable: randomNumber(0, 2) },
                { min_replicas: randomNumber(2, 5) },
                { max_replicas: randomNumber(20, 50) },
                {
                  autoscaling_metric: randomElement([
                    "CPU",
                    "Memory",
                    "Custom",
                    "Requests",
                  ]),
                },
                { autoscaling_target: randomNumber(50, 80) + "%" },
              ],
              cpu: [
                { requests: String(randomNumber(2, 8)) },
                { limits: String(randomNumber(4, 16)) },
                { usage_avg: randomNumber(1.5, 6.5, 1).toString() },
                { usage_peak: randomNumber(3.0, 14.0, 1).toString() },
                { throttling_events: randomNumber(0, 10) },
                { utilization: randomNumber(40, 85) + "%" },
              ],
              memory: [
                { requests: `${randomNumber(4, 16)}Gi` },
                { limits: `${randomNumber(8, 32)}Gi` },
                { usage_avg: `${randomNumber(3.5, 14.5, 1)}Gi` },
                { usage_peak: `${randomNumber(6.0, 28.0, 1)}Gi` },
                { oom_events: randomNumber(0, 3) },
                { gc_time_ms: randomNumber(50, 500) },
                { utilization: randomNumber(40, 85) + "%" },
              ],
              metrics: [
                { requests_per_second: randomNumber(1000, 10000) },
                { response_time_p50_ms: randomNumber(5, 50) },
                { response_time_p95_ms: randomNumber(20, 200) },
                { response_time_p99_ms: randomNumber(50, 500) },
                { error_rate: randomNumber(0, 0.5, 4) },
                { success_rate: randomNumber(99.5, 100, 4) + "%" },
                { throughput_mbps: randomNumber(10, 500, 1) },
                { saturation: randomNumber(10, 80) + "%" },
              ],
              health_checks: [
                { readiness: randomElement(["passing", "failing"]) },
                { liveness: randomElement(["passing", "failing"]) },
                {
                  startup: randomElement([
                    "passing",
                    "failing",
                    "not configured",
                  ]),
                },
                { last_failure: randomElement([randomRecentDate(), "never"]) },
                { probe_interval_seconds: randomNumber(5, 30) },
                { probe_timeout_seconds: randomNumber(1, 5) },
                { failure_threshold: randomNumber(1, 5) },
                { success_threshold: randomNumber(1, 3) },
              ],
              network: [
                { ingress_mbps: randomNumber(5, 500, 1) },
                { egress_mbps: randomNumber(5, 500, 1) },
                { connections: randomNumber(100, 10000) },
                { latency_ms: randomNumber(1, 50, 1) },
                { packet_loss: randomNumber(0, 0.1, 4) + "%" },
              ],
              storage: [
                {
                  volume_type: randomElement([
                    "EBS",
                    "EFS",
                    "PVC",
                    "emptyDir",
                    "hostPath",
                  ]),
                },
                { volume_size: `${randomNumber(10, 1000)}Gi` },
                { iops: randomNumber(1000, 10000) },
                { throughput_mbps: randomNumber(50, 500) },
                { utilization: randomNumber(10, 90) + "%" },
              ],
              external_links: generateExternalLinks("workload", workloadId),
            };

          case "resource":
            // Check the name to determine the type of resource
            if (
              nodeName.toLowerCase().includes("s3") ||
              nodeName.toLowerCase().includes("bucket")
            ) {
              const s3Id = nodeName.split(":")[0].trim();
              return {
                id: s3Id,
                type: "s3",
                status: randomElement([
                  "operational",
                  "degraded",
                  "optimizing",
                ]),
                region: randomElement([
                  "us-east-1",
                  "us-west-2",
                  "eu-central-1",
                  "eu-west-1",
                  "ap-southeast-1",
                  "ap-northeast-1",
                ]),
                metrics: [
                  { total_objects: randomNumber(10000000, 1000000000) },
                  {
                    total_size: `${randomNumber(10, 100)}.${randomNumber(
                      1,
                      9
                    )}TB`,
                  },
                  { daily_uploads: randomNumber(50000, 500000) },
                  { daily_downloads: randomNumber(150000, 1500000) },
                  { average_object_size: `${randomNumber(1, 100)}MB` },
                  { largest_object: `${randomNumber(1, 50)}GB` },
                  { smallest_object: `${randomNumber(1, 100)}KB` },
                ],
                performance: [
                  { upload_latency_ms: randomNumber(20, 100) },
                  { download_latency_ms: randomNumber(10, 80) },
                  { availability: randomNumber(99.95, 100, 4) },
                  { throughput_mbps: randomNumber(100, 10000) },
                  { requests_per_second: randomNumber(1000, 100000) },
                  { error_rate: randomNumber(0, 0.1, 4) },
                ],
                cost: [
                  { monthly_estimate: randomNumber(5000, 50000) },
                  { currency: "USD" },
                  { storage_cost: randomNumber(3000, 30000) },
                  { transfer_cost: randomNumber(1000, 10000) },
                  { request_cost: randomNumber(500, 5000) },
                  { cost_per_gb: `$${randomNumber(0.01, 0.05, 3)}` },
                ],
                compliance: [
                  { encryption: randomElement(["AES-256", "KMS", "DSSE-KMS"]) },
                  { object_lock: randomElement([true, false]) },
                  {
                    versioning: randomElement([
                      "Enabled",
                      "Suspended",
                      "Disabled",
                    ]),
                  },
                  { public_access: "Blocked" },
                  {
                    retention_policy: randomElement([
                      "1 year",
                      "3 years",
                      "5 years",
                      "7 years",
                    ]),
                  },
                  { lifecycle_rules: randomNumber(1, 10) },
                  { replication: randomElement(["Enabled", "Disabled"]) },
                  { logging: randomElement(["Enabled", "Disabled"]) },
                ],
                external_links: generateExternalLinks("resource", s3Id),
              };
            } else if (
              nodeName.toLowerCase().includes("db") ||
              nodeName.toLowerCase().includes("database") ||
              nodeName.toLowerCase().includes("postgres") ||
              nodeName.toLowerCase().includes("mysql") ||
              nodeName.toLowerCase().includes("mongo")
            ) {
              const dbId = nodeName.split(":")[0].trim();
              const dbType = randomElement([
                "postgresql",
                "mysql",
                "mongodb",
                "aurora",
                "dynamodb",
              ]);
              const isRelational = ["postgresql", "mysql", "aurora"].includes(
                dbType
              );

              return {
                id: dbId,
                type: dbType,
                version: isRelational
                  ? `${randomNumber(10, 16)}.${randomNumber(0, 9)}`
                  : dbType === "mongodb"
                  ? `${randomNumber(4, 6)}.${randomNumber(0, 9)}`
                  : "N/A",
                status: randomElement([
                  "healthy",
                  "degraded",
                  "maintenance",
                  "scaling",
                ]),
                instance_class: randomElement([
                  "db.r6g.2xlarge",
                  "db.r6g.4xlarge",
                  "db.r6g.8xlarge",
                  "db.r6g.12xlarge",
                  "db.r6g.16xlarge",
                ]),
                multi_az: randomElement([true, false]),
                size: `${randomNumber(100, 10000)}GB`,
                connections: [
                  { active: randomNumber(100, 2000) },
                  { idle: randomNumber(50, 500) },
                  { max: randomNumber(2000, 10000) },
                  {
                    connection_pooling: randomElement([
                      "pgbouncer",
                      "proxysql",
                      "none",
                    ]),
                  },
                  { connection_timeout_ms: randomNumber(1000, 10000) },
                ],
                performance: [
                  { queries_per_second: randomNumber(5000, 50000) },
                  { read_iops: randomNumber(10000, 100000) },
                  { write_iops: randomNumber(5000, 50000) },
                  { avg_query_time_ms: randomNumber(1, 20) },
                  { slow_queries_per_hour: randomNumber(0, 100) },
                  { buffer_cache_hit_ratio: randomNumber(95, 99.9, 1) + "%" },
                  { index_hit_ratio: randomNumber(95, 99.9, 1) + "%" },
                  { cpu_utilization: randomNumber(20, 80) + "%" },
                  { memory_utilization: randomNumber(40, 90) + "%" },
                ],
                storage: [
                  { allocated: `${randomNumber(1000, 20000)}GB` },
                  { used: `${randomNumber(500, 10000)}GB` },
                  { usage_percent: randomNumber(10, 90, 1) },
                  { iops_provisioned: randomNumber(3000, 30000) },
                  { storage_type: randomElement(["gp3", "io1", "io2"]) },
                  { auto_scaling: randomElement(["enabled", "disabled"]) },
                  { throughput: `${randomNumber(125, 1000)}MB/s` },
                ],
                backups: [
                  { last_successful: randomRecentDate() },
                  { retention_days: randomNumber(7, 90) },
                  { size: `${randomNumber(100, 9000)}GB` },
                  {
                    backup_window: `${randomNumber(0, 23)}:00-${randomNumber(
                      0,
                      23
                    )}:00 UTC`,
                  },
                  {
                    point_in_time_recovery: randomElement([
                      "enabled",
                      "disabled",
                    ]),
                  },
                  {
                    snapshot_frequency: randomElement([
                      "daily",
                      "every 6 hours",
                      "every 12 hours",
                    ]),
                  },
                  { automated_backups: randomElement(["enabled", "disabled"]) },
                ],
                security: [
                  {
                    encryption_at_rest: randomElement(["enabled", "disabled"]),
                  },
                  {
                    encryption_in_transit: randomElement([
                      "enabled",
                      "disabled",
                    ]),
                  },
                  {
                    network_isolation: randomElement([
                      "private subnet",
                      "vpc",
                      "public",
                    ]),
                  },
                  {
                    authentication: randomElement([
                      "IAM",
                      "password",
                      "certificate",
                    ]),
                  },
                  { audit_logging: randomElement(["enabled", "disabled"]) },
                ],
                external_links: generateExternalLinks("resource", dbId),
              };
            } else if (
              nodeName.toLowerCase().includes("redis") ||
              nodeName.toLowerCase().includes("cache")
            ) {
              const redisId = nodeName.split(":")[0].trim();
              return {
                id: redisId,
                type: "redis",
                version: `${randomNumber(5, 7)}.${randomNumber(0, 9)}`,
                status: randomElement(["healthy", "degraded", "scaling"]),
                cluster_mode: randomElement(["enabled", "disabled"]),
                shards: randomNumber(1, 20),
                replicas_per_shard: randomNumber(0, 5),
                connections: [
                  { active: randomNumber(500, 5000) },
                  { max: randomNumber(10000, 100000) },
                  { connection_timeout_ms: randomNumber(100, 5000) },
                  { client_timeout_ms: randomNumber(1000, 10000) },
                ],
                performance: [
                  { operations_per_second: randomNumber(50000, 500000) },
                  { hit_rate: randomNumber(90, 99.9, 2) / 100 },
                  { miss_rate: randomNumber(0.1, 10, 2) / 100 },
                  { evictions: randomNumber(0, 5000) },
                  { latency_us: randomNumber(100, 2000) },
                  { throughput_mbps: randomNumber(100, 1000) },
                  { cpu_utilization: randomNumber(20, 80) + "%" },
                ],
                memory: [
                  { allocated: `${randomNumber(10, 640)}GB` },
                  { used: `${randomNumber(5, 480)}GB` },
                  { usage_percent: randomNumber(10, 90) },
                  { fragmentation_ratio: randomNumber(100, 150, 2) / 100 },
                  {
                    max_memory_policy: randomElement([
                      "noeviction",
                      "allkeys-lru",
                      "volatile-lru",
                      "allkeys-random",
                    ]),
                  },
                  { keys_count: randomNumber(1000000, 100000000) },
                  { avg_key_size_bytes: randomNumber(10, 1000) },
                  { largest_key_size_kb: randomNumber(1, 1000) },
                ],
                persistence: [
                  { rdb_enabled: randomElement([true, false]) },
                  { aof_enabled: randomElement([true, false]) },
                  {
                    backup_frequency: randomElement([
                      "1 hour",
                      "6 hours",
                      "12 hours",
                      "1 day",
                    ]),
                  },
                  { last_save: randomRecentDate() },
                ],
                security: [
                  { encryption_in_transit: randomElement([true, false]) },
                  { encryption_at_rest: randomElement([true, false]) },
                  { auth_enabled: true },
                  {
                    network_isolation: randomElement([
                      "private subnet",
                      "vpc",
                      "public",
                    ]),
                  },
                ],
                external_links: generateExternalLinks("resource", redisId),
              };
            } else if (
              nodeName.toLowerCase().includes("kafka") ||
              nodeName.toLowerCase().includes("msk") ||
              nodeName.toLowerCase().includes("stream")
            ) {
              const kafkaId = nodeName.split(":")[0].trim();
              return {
                id: kafkaId,
                type: "kafka",
                version: `${randomNumber(2, 3)}.${randomNumber(
                  0,
                  9
                )}.${randomNumber(0, 9)}`,
                status: randomElement(["healthy", "degraded", "scaling"]),
                brokers: randomNumber(3, 30),
                topics: randomNumber(50, 500),
                partitions: randomNumber(500, 5000),
                replication_factor: randomNumber(2, 3),
                performance: [
                  { messages_per_second: randomNumber(10000, 1000000) },
                  { throughput_mbps: randomNumber(100, 10000) },
                  { producer_latency_ms: randomNumber(1, 50) },
                  { consumer_latency_ms: randomNumber(1, 100) },
                  { retention_size_tb: randomNumber(1, 100) },
                  { retention_hours: randomNumber(24, 168) },
                ],
                resources: [
                  { cpu_utilization: randomNumber(20, 80) + "%" },
                  { memory_utilization: randomNumber(40, 90) + "%" },
                  { disk_utilization: randomNumber(30, 85) + "%" },
                  { network_in_mbps: randomNumber(100, 5000) },
                  { network_out_mbps: randomNumber(100, 5000) },
                ],
                consumer_groups: [
                  { total: randomNumber(10, 100) },
                  { active: randomNumber(5, 50) },
                  { rebalancing: randomNumber(0, 5) },
                  { lag_max: randomNumber(0, 10000) },
                ],
                security: [
                  {
                    encryption_in_transit: randomElement([
                      "TLS",
                      "PLAINTEXT",
                      "TLS and PLAINTEXT",
                    ]),
                  },
                  {
                    authentication: randomElement([
                      "SASL/SCRAM",
                      "SASL/IAM",
                      "mTLS",
                      "None",
                    ]),
                  },
                  { authorization: randomElement(["ACLs", "None"]) },
                ],
                external_links: generateExternalLinks("resource", kafkaId),
              };
            } else if (
              nodeName.toLowerCase().includes("lambda") ||
              nodeName.toLowerCase().includes("function")
            ) {
              const lambdaId = nodeName.split(":")[0].trim();
              return {
                id: lambdaId,
                type: "lambda",
                runtime: randomElement([
                  "nodejs18.x",
                  "python3.10",
                  "java17",
                  "go1.x",
                  "dotnet6",
                ]),
                status: randomElement(["active", "updating", "throttled"]),
                memory_mb: randomElement([
                  128, 256, 512, 1024, 2048, 4096, 8192, 10240,
                ]),
                timeout_seconds: randomNumber(3, 900),
                metrics: [
                  { invocations_per_minute: randomNumber(10, 10000) },
                  { avg_duration_ms: randomNumber(10, 5000) },
                  { max_duration_ms: randomNumber(100, 10000) },
                  { error_rate: randomNumber(0, 1, 3) },
                  { throttles: randomNumber(0, 100) },
                  { concurrent_executions: randomNumber(1, 1000) },
                  { cold_starts_percent: randomNumber(0.1, 10, 1) + "%" },
                ],
                cost: [
                  { monthly_estimate: randomNumber(10, 5000) },
                  { currency: "USD" },
                  { compute_cost: randomNumber(5, 3000) },
                  { request_cost: randomNumber(5, 2000) },
                ],
                configuration: [
                  { vpc_enabled: randomElement([true, false]) },
                  { layers: randomNumber(0, 5) },
                  {
                    reserved_concurrency: randomElement([
                      null,
                      randomNumber(10, 1000),
                    ]),
                  },
                  {
                    provisioned_concurrency: randomElement([
                      null,
                      randomNumber(1, 100),
                    ]),
                  },
                  { architecture: randomElement(["x86_64", "arm64"]) },
                  { code_size_mb: randomNumber(1, 250) },
                ],
                external_links: generateExternalLinks("resource", lambdaId),
              };
            } else {
              // Generic resource
              const genericId = nodeName.split(":")[0].trim();
              return {
                id: genericId,
                type: "generic",
                status: randomElement([
                  "operational",
                  "degraded",
                  "maintenance",
                ]),
                created_at: randomDateInRange(2020, 2024),
                last_accessed: randomRecentDate(),
                region: randomElement([
                  "us-east-1",
                  "us-west-2",
                  "eu-central-1",
                  "eu-west-1",
                  "ap-southeast-1",
                  "ap-northeast-1",
                ]),
                metrics: [
                  { availability: randomNumber(99.9, 100, 3) + "%" },
                  { response_time_ms: randomNumber(5, 100) },
                  { throughput: randomNumber(100, 10000) + " req/s" },
                  { error_rate: randomNumber(0, 0.5, 3) + "%" },
                  { utilization: randomNumber(10, 90) + "%" },
                ],
                cost: [
                  { monthly_estimate: randomNumber(100, 10000) },
                  { currency: "USD" },
                  { year_over_year_change: randomNumber(-20, 30, 1) + "%" },
                ],
                security: [
                  {
                    compliance: randomElement([
                      "SOC2",
                      "PCI-DSS",
                      "HIPAA",
                      "GDPR",
                      "ISO27001",
                    ]),
                  },
                  { encryption: randomElement(["enabled", "disabled"]) },
                  { access_control: randomElement(["IAM", "RBAC", "ACL"]) },
                ],
                external_links: generateExternalLinks("resource", genericId),
              };
            }

          case "other":
            const otherId = `other-${randomNumber(1000, 9999)}`;
            return {
              id: otherId,
              name: nodeName,
              description: `Enterprise resource: ${nodeName}`,
              created_at: randomDateInRange(2020, 2024),
              last_updated: randomRecentDate(),
              status: randomElement([
                "active",
                "inactive",
                "pending",
                "maintenance",
                "deprecated",
              ]),
              owner: randomElement([
                "Platform Team",
                "SRE Team",
                "DevOps",
                "Infrastructure",
                "Security",
              ]),
              priority: randomElement(["critical", "high", "medium", "low"]),
              environment: randomElement([
                "production",
                "staging",
                "development",
                "shared",
              ]),
              tags: [
                randomElement(["prod", "dev", "stage", "test", "shared"]),
                randomElement([
                  "app",
                  "data",
                  "infra",
                  "security",
                  "monitoring",
                ]),
                randomElement([
                  "team-a",
                  "team-b",
                  "team-c",
                  "platform",
                  "core",
                ]),
                randomElement(["v1", "v2", "legacy", "next-gen", "beta"]),
              ].slice(0, randomNumber(2, 4)),
              metadata: [
                {
                  cost_center: randomElement([
                    "IT-" + randomNumber(1000, 9999),
                    "INFRA-" + randomNumber(1000, 9999),
                    "PROD-" + randomNumber(1000, 9999),
                  ]),
                },
                {
                  business_unit: randomElement([
                    "Retail",
                    "Finance",
                    "Marketing",
                    "Engineering",
                    "Operations",
                  ]),
                },
                {
                  data_classification: randomElement([
                    "public",
                    "internal",
                    "confidential",
                    "restricted",
                  ]),
                },
                {
                  sla: randomElement(["99.9%", "99.95%", "99.99%", "99.999%"]),
                },
              ],
              external_links: generateExternalLinks("other", otherId),
            };

          default:
            return null;
        }
      };

      // Function to generate metadata for a node and all its children recursively
      const generateMetadataForTree = (node) => {
        // Generate metadata for this node and store it in the map
        // Use the node's toString() as a unique identifier
        const nodeId = node.toString();
        const metadata = generateMetadata(node);
        if (metadata) {
          nodeMetadataMap.set(nodeId, metadata);
        }

        // Process children recursively
        if (!node.isLeaf()) {
          node.getChildren().forEach((child) => {
            generateMetadataForTree(child);
          });
        }
      };

      // Helper function to format snake_case keys
      const formatMetadataKey = (key) => {
        if (key.toLowerCase() === "id") return "ID"; // Special case for ID
        // Handle specific acronyms or known terms
        const acronyms = {
          cpu: "CPU",
          db: "DB",
          pci_dss: "PCI DSS",
          gdpr: "GDPR",
          hipaa: "HIPAA",
          sox: "SOX",
          nist_800_53: "NIST 800-53",
          fedramp: "FedRAMP",
          iso_27001: "ISO 27001",
          ms: "ms", // Keep milliseconds lowercase
          us: "µs", // Microseconds
          gb: "GB",
          mb: "MB",
          kb: "KB",
          tb: "TB",
          gi: "Gi", // Gibibytes
          sla: "SLA",
          oom: "OOM",
          gc: "GC",
          iops: "IOPS",
          mbps: "Mbps",
          p50: "p50",
          p95: "p95",
          p99: "p99",
          avg: "Avg",
          rdb: "RDB",
          aof: "AOF",
          az: "AZ",
          vpc: "VPC",
          tls: "TLS",
          "sasl/scram": "SASL/SCRAM",
          "sasl/iam": "SASL/IAM",
          mtls: "mTLS",
          acls: "ACLs",
          iam: "IAM",
          rbac: "RBAC",
          soc2: "SOC2",
          url: "URL",
        };
        if (acronyms[key.toLowerCase()]) {
          return acronyms[key.toLowerCase()];
        }
        // General formatting
        return key
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join(" ");
      };

      // Helper function to format string values
      const formatMetadataValue = (value) => {
        if (typeof value !== "string") return value; // Only format strings

        // Handle specific known values first
        const specificValues = {
          "in-progress": "In Progress",
          "not-applicable": "Not Applicable",
          "under budget": "Under Budget",
          "on track": "On Track",
          "over budget": "Over Budget",
          noeviction: "No Eviction",
          "allkeys-lru": "All Keys LRU",
          "volatile-lru": "Volatile LRU",
          "allkeys-random": "All Keys Random",
          "not configured": "Not Configured",
          "private subnet": "Private Subnet",
          emptyDir: "emptyDir", // Keep as is
          hostPath: "hostPath", // Keep as is
        };
        if (specificValues[value.toLowerCase()]) {
          return specificValues[value.toLowerCase()];
        }

        // General capitalization for simple lowercase words (avoiding IDs, technical terms)
        if (
          value === value.toLowerCase() &&
          !value.includes(" ") &&
          !value.includes("-") &&
          !value.includes("_") &&
          !/^[a-z0-9.-]+$/.test(value) && // Avoid things like 'us-east-1', '1.2.3'
          !["true", "false", "null"].includes(value) && // Avoid boolean/null strings
          isNaN(value) // Avoid pure numbers
        ) {
          return value.charAt(0).toUpperCase() + value.slice(1);
        }

        // Return original value if no specific formatting applies
        return value;
      };

      // Function to populate a cloned template with metadata
      const populateTemplate = (templateClone, metadata) => {
        if (!metadata) return; // Exit if no metadata

        // Populate simple key-value pairs
        Object.keys(metadata).forEach((key) => {
          const value = metadata[key];
          if (typeof value !== "object" || value === null) {
            const element = templateClone.querySelector(
              `[data-metadata-key="${key}"]`
            );
            if (element) {
              // Format the value before displaying
              element.textContent = formatMetadataValue(value);
            }
          }
        });

        // Populate arrays
        templateClone
          .querySelectorAll("[data-metadata-array]")
          .forEach((arrayContainer) => {
            const arrayKey = arrayContainer.getAttribute("data-metadata-array");
            const arrayData = metadata[arrayKey];
            const itemTemplate = arrayContainer.querySelector(
              "template[data-array-item-template]"
            );

            if (Array.isArray(arrayData) && itemTemplate) {
              arrayData.forEach((item) => {
                const itemClone = itemTemplate.content.cloneNode(true);

                if (typeof item === "object" && item !== null) {
                  // Handle arrays of objects (like compliance, links, etc.)
                  Object.keys(item).forEach((itemKey) => {
                    const element = itemClone.querySelector(
                      `[data-metadata-key="${itemKey}"]`
                    );
                    if (element) {
                      if (itemKey === "url" && element.tagName === "A") {
                        element.href = item[itemKey];
                      } else if (
                        itemKey === "last_check" &&
                        typeof item[itemKey] === "string"
                      ) {
                        // Format date nicely
                        try {
                          element.textContent = new Date(
                            item[itemKey]
                          ).toLocaleDateString();
                        } catch (e) {
                          element.textContent = formatMetadataValue(
                            item[itemKey]
                          ); // Fallback
                        }
                      } else {
                        // Format the value before displaying
                        element.textContent = formatMetadataValue(
                          item[itemKey]
                        );
                      }
                    }
                  });
                  // Special case for simple key-value objects within arrays (like compliance)
                  const keys = Object.keys(item);
                  if (keys.length === 1) {
                    const singleKey = keys[0];
                    const singleValue = item[singleKey];
                    const keyElement = itemClone.querySelector(
                      `[data-metadata-key="key"]`
                    );
                    const valueElement = itemClone.querySelector(
                      `[data-metadata-key="value"]`
                    );
                    // Format the key before displaying
                    if (keyElement)
                      keyElement.textContent = formatMetadataKey(singleKey);
                    // Format the value before displaying
                    if (valueElement)
                      valueElement.textContent =
                        formatMetadataValue(singleValue);
                  }
                } else if (typeof item !== "object") {
                  // Handle arrays of primitives (like tags)
                  // Format the value before displaying
                  const element = itemClone.querySelector(
                    `[data-metadata-key="value"]`
                  );
                  if (element) {
                    element.textContent = formatMetadataValue(item);
                  }
                }
                arrayContainer.appendChild(itemClone);
              });
            }
          });

        // Handle resource type specifics
        if (metadata.type && templateClone.id === "template-resource") {
          const resourceTypeDiv = templateClone.querySelector(
            `[data-resource-type="${metadata.type}"]`
          );
          if (resourceTypeDiv) {
            resourceTypeDiv.style.display = "block";
            // Populate specific fields within the resource type div
            Object.keys(metadata).forEach((key) => {
              const value = metadata[key];
              if (typeof value !== "object" || value === null) {
                // Simple values first
                const element = resourceTypeDiv.querySelector(
                  `[data-metadata-key="${key}"]`
                );
                if (element) {
                  element.textContent = value;
                }
              } else if (Array.isArray(value)) {
                // Arrays within the specific type
                const arrayContainer = resourceTypeDiv.querySelector(
                  `[data-metadata-array="${key}"]`
                );
                const itemTemplate = arrayContainer?.querySelector(
                  "template[data-array-item-template]"
                );
                if (arrayContainer && itemTemplate) {
                  value.forEach((item) => {
                    const itemClone = itemTemplate.content.cloneNode(true);
                    if (typeof item === "object" && item !== null) {
                      Object.keys(item).forEach((itemKey) => {
                        const element = itemClone.querySelector(
                          `[data-metadata-key="${itemKey}"]`
                        );
                        if (element) element.textContent = item[itemKey];
                      });
                      // Handle simple key-value objects within arrays
                      const keys = Object.keys(item);
                      if (keys.length === 1) {
                        const singleKey = keys[0];
                        const singleValue = item[singleKey];
                        const keyElement = itemClone.querySelector(
                          `[data-metadata-key="key"]`
                        );
                        const valueElement = itemClone.querySelector(
                          `[data-metadata-key="value"]`
                        );
                        if (keyElement) keyElement.textContent = singleKey;
                        if (valueElement)
                          valueElement.textContent = singleValue;
                      }
                    }
                    arrayContainer.appendChild(itemClone);
                  });
                }
              }
            });
          } else {
            // Show generic if specific type not found
            const genericDiv = templateClone.querySelector(
              `[data-resource-type="generic"]`
            );
            if (genericDiv) genericDiv.style.display = "block";
          }
        }
      };

      const openNodeDetails = (node) => {
        const elements = document.querySelectorAll(".node-name");
        elements.forEach((element) => {
          element.innerHTML = node.getUserObject().name;
        });

        // Get pre-generated metadata from the map
        const nodeId = node.toString(); // Using toString() as the key like before
        const metadata = nodeMetadataMap.get(nodeId);
        const metadataContainer = document.getElementById("node-metadata");
        const userObject = node.getUserObject();
        const nodeClass = userObject.class || "other"; // Default to 'other' if class is missing

        metadataContainer.innerHTML = ""; // Clear previous metadata

        // Find the template
        const templateId = `template-${nodeClass}`;
        const templateElement = document.getElementById(templateId);

        if (templateElement && metadata) {
          // Clone the template
          const templateClone = templateElement.cloneNode(true);
          templateClone.removeAttribute("id"); // Avoid duplicate IDs

          // Populate the cloned template
          populateTemplate(templateClone, metadata);

          // Append the populated template to the container
          metadataContainer.appendChild(templateClone);
        } else if (metadata) {
          // Fallback or error handling if template not found but metadata exists
          console.warn(`Metadata template not found for class: ${nodeClass}`);
          // Optionally display raw JSON as fallback
          const pre = document.createElement("pre");
          pre.textContent = JSON.stringify(metadata, null, 2);
          metadataContainer.appendChild(pre);
        } else {
          // Handle case where there's no metadata
          metadataContainer.innerHTML =
            "<p class='text-text-secondary'>No metadata available for this node.</p>";
        }
      };

      const addChildren = (node, children) => {
        for (child of children) {
          childNode = new TreeNode(child);
          childNode.on("select", (node) => {
            openNodeDetails(node);
          });
          node.addChild(childNode);
          if (child.children) {
            addChildren(childNode, child.children);
          }
        }
      };
      window.onload = () => {
        const rootNode = new TreeNode(data.root);
        rootNode.on("select", (node) => {
          openNodeDetails(node);
        });
        if (data.root.children) {
          addChildren(rootNode, data.root.children);
        }

        // Generate metadata for the entire tree when it's loaded
        generateMetadataForTree(rootNode);

        // Display details for the root node initially
        openNodeDetails(rootNode);

        const tree = new TreeView(rootNode, "#tree-container");
        tree.reload();

        // Custom behavior to override the default tree.js behavior
        // We need to wait a bit for the tree to be fully rendered
        setTimeout(() => {
          // Override the default click behavior
          const treeContainer = document.getElementById("tree-container");

          // Prevent the default click behavior on the description spans
          treeContainer.addEventListener(
            "click",
            function (e) {
              // If the click is on the description span but not on the arrow icon
              if (
                e.target.closest(".tj_description") &&
                !e.target.closest(".tj_mod_icon")
              ) {
                e.stopPropagation(); // Stop event propagation

                // Find the node associated with this description
                let element = e.target;
                while (element && !element.tj_node) {
                  element = element.parentElement;
                }

                if (element && element.tj_node) {
                  const node = element.tj_node;

                  // Select the node and show details without toggling expansion
                  const root = node.getRoot();
                  if (root instanceof TreeNode) {
                    TreeUtil.getSelectedNodesForNode(root).forEach(function (
                      n
                    ) {
                      n.setSelected(false);
                    });
                  }

                  node.setSelected(true);
                  openNodeDetails(node);
                  tree.reload();
                }
              }
            },
            true
          ); // Use capture phase to intercept events before they reach the default handlers

          // Add click handlers to the arrow icons
          treeContainer.addEventListener(
            "click",
            function (e) {
              // If the click is on the arrow icon
              if (e.target.closest(".tj_mod_icon")) {
                e.stopPropagation(); // Stop event propagation

                // Find the node associated with this arrow
                let element = e.target.closest(".tj_description");
                if (element && element.tj_node) {
                  const node = element.tj_node;

                  // Toggle expansion only
                  if (!node.isLeaf()) {
                    node.toggleExpanded();
                    tree.reload();

                    // Re-apply our custom event handlers after reload
                    setTimeout(() => {
                      applyCustomBehavior();
                    }, 0);
                  }
                }
              }
            },
            true
          ); // Use capture phase
        }, 100);

        // Function to apply custom behavior after tree reloads
        function applyCustomBehavior() {
          // Make arrow icons more visually distinct as clickable elements
          document.querySelectorAll(".tj_mod_icon").forEach((icon) => {
            icon.style.cursor = "pointer";
          });
        }

        // Initial application of custom behavior
        applyCustomBehavior();

        // --- Resizing Logic ---
        const resizeHandle = document.getElementById("resize-handle");
        const resizableGrid = document.getElementById("resizable-grid");
        const treeColumn = document.getElementById("tree-column");
        const detailsColumn = document.getElementById("details-column");
        let isResizing = false;
        let startX, initialTreeWidth, initialDetailsWidth, gridWidth;

        resizeHandle.addEventListener("mousedown", (e) => {
          isResizing = true;
          startX = e.clientX;
          gridWidth = resizableGrid.offsetWidth;
          initialTreeWidth = treeColumn.offsetWidth;
          // No need for initialDetailsWidth as we'll use fractions

          // Prevent text selection during drag
          document.body.style.userSelect = "none";
          document.body.style.cursor = "col-resize"; // Optional: change cursor globally

          document.addEventListener("mousemove", handleMouseMove);
          document.addEventListener("mouseup", handleMouseUp);
        });

        function handleMouseMove(e) {
          if (!isResizing) return;

          const currentX = e.clientX;
          const deltaX = currentX - startX;
          let newTreeWidth = initialTreeWidth + deltaX;

          // Constraints (e.g., min width 100px)
          const minWidth = 100;
          const handleWidth = resizeHandle.offsetWidth;
          const maxWidth = gridWidth - minWidth - handleWidth;

          newTreeWidth = Math.max(minWidth, Math.min(newTreeWidth, maxWidth));

          const newTreeFraction = newTreeWidth / gridWidth;
          const newDetailsFraction =
            1 - newTreeFraction - handleWidth / gridWidth;

          // Update grid-template-columns using fractions (fr units)
          // Ensure fractions are positive
          if (newTreeFraction > 0 && newDetailsFraction > 0) {
            resizableGrid.style.gridTemplateColumns = `${newTreeFraction}fr ${handleWidth}px ${newDetailsFraction}fr`;
          }
        }

        function handleMouseUp() {
          if (isResizing) {
            isResizing = false;
            document.removeEventListener("mousemove", handleMouseMove);
            document.removeEventListener("mouseup", handleMouseUp);

            // Restore text selection and cursor
            document.body.style.userSelect = "";
            document.body.style.cursor = "";
          }
        }
        // --- End Resizing Logic ---
      };
    </script>
  </body>
</html>
