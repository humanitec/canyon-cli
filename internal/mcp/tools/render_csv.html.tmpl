<!DOCTYPE html>
<html>
  <head>
    <title>Canyon AI</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Archivo:ital,wght@0,100..900;1,100..900&display=swap"
      rel="stylesheet"
    />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>

    <!-- Theme Definitions and Styles -->
    <style>
      * {
        font-family: "Archivo", sans-serif;
      }

      :root {
        /* Base color palette */
        --color-tan-50: #fcf9f8;
        --color-tan-100: #f9f2f1;
        --color-tan-200: #f1e3df;
        --color-tan-300: #ebd6d1;
        --color-tan-400: #e3c6bf;
        --color-tan-500: #ddbab1;
        --color-tan-600: #c48778;
        --color-tan-700: #a75c49;
        --color-tan-800: #6e3c30;
        --color-tan-900: #391f19;
        --color-tan-950: #1c100c;
        --color-black-50: #e8e8e8;
        --color-black-100: #d1d1d1;
        --color-black-200: #a3a3a3;
        --color-black-300: #737373;
        --color-black-400: #454545;
        --color-black-500: #171717;
        --color-black-600: #141414;
        --color-black-700: #141414;
        --color-black-800: #121212;
        --color-black-900: #121212;
        --color-black-950: #0f0f0f;
        --color-red-50: #ffebeb;
        --color-red-100: #ffdbdb;
        --color-red-200: #ffb3b3;
        --color-red-300: #ff8f8f;
        --color-red-400: #ff6b6b;
        --color-red-500: #ff4444;
        --color-red-600: #ff0505;
        --color-red-700: #c20000;
        --color-red-800: #800000;
        --color-red-900: #420000;
        --color-red-950: #1f0000;
        --color-brown-50: #f2e6e3;
        --color-brown-100: #e7d0ca;
        --color-brown-200: #ce9e92;
        --color-brown-300: #b76f5d;
        --color-brown-400: #8a4d3d;
        --color-brown-500: #532e25;
        --color-brown-600: #43251e;
        --color-brown-700: #311b16;
        --color-brown-800: #20120e;
        --color-brown-900: #120a08;
        --color-brown-950: #070403;
        --color-purple-50: #ebeaf1;
        --color-purple-100: #d8d4e2;
        --color-purple-200: #aea7c3;
        --color-purple-300: #877ca6;
        --color-purple-400: #635983;
        --color-purple-500: #423b57;
        --color-purple-600: #352f46;
        --color-purple-700: #272334;
        --color-purple-800: #191721;
        --color-purple-900: #0e0c12;
        --color-purple-950: #070609;
        --color-orange-50: #fdede7;
        --color-orange-100: #fcded4;
        --color-orange-200: #f9bda9;
        --color-orange-300: #f79c7e;
        --color-orange-400: #f47b53;
        --color-orange-500: #f15a26;
        --color-orange-600: #d33f0e;
        --color-orange-700: #9e2f0a;
        --color-orange-800: #691f07;
        --color-orange-900: #351003;
        --color-orange-950: #180702;
        --color-teal-50: #e8f5f7;
        --color-teal-100: #d2ecef;
        --color-teal-200: #a1d7de;
        --color-teal-300: #73c3ce;
        --color-teal-400: #42aebd;
        --color-teal-500: #32838e;
        --color-teal-600: #286971;
        --color-teal-700: #1f5057;
        --color-teal-800: #143439;
        --color-teal-900: #0b1c1e;
        --color-teal-950: #050e0f;
      }

      /* AG Grid theme customization using dedicated table variables */
      .ag-theme-alpine {
        /* Map AG Grid's internal variables to our new table-specific semantic variables */
        --ag-background-color: var(--table-background);
        --ag-foreground-color: var(--table-text);
        --ag-header-background-color: var(--table-header-bg);
        --ag-odd-row-background-color: var(--table-row-bg);
        --ag-row-hover-color: var(--table-row-hover);
        --ag-selected-row-background-color: var(--table-selected-row-bg);

        /* Keep borders transparent/none */
        --ag-border-color: transparent;
        --ag-row-border-color: transparent;
        --ag-borders: none;
        --ag-borders-side-button: none;
        --ag-borders-cell: none; /* Keep none */
        --ag-borders-critical: none;
        --ag-borders-secondary: none;
        --ag-borders-row: none;
      }

      /* Define theme variables directly based on data-theme */
      [data-theme="light"] {
        --text-primary: var(--color-black-900);
        --text-secondary: var(--color-orange-800);
        --text-link: var(--color-purple-500);
        --interactive-subtle: var(--color-tan-500);
        --border-strong: var(--color-red-500);
        --background-header: var(--color-tan-100);
        --background-row: var(--color-tan-200); /* General row bg */
        --background-button-primary: var(--color-red-300);
        --accent-brand: var(--color-orange-500);
        --background-primary: var(--color-tan-50);
        --background-secondary: var(--color-tan-100); /* Details bg */
        --status-success: #09983a;
        --background-highlight-primary: var(--color-tan-50);
        --background-highlight-secondary: var(--color-tan-200);
        --background-highlight-tertiary: var(--color-tan-100);

        /* Table specific semantic variables - Light */
        --table-background: var(--color-tan-100);
        --table-text: var(--color-black-900);
        --table-header-bg: var(--color-brown-200);
        --table-row-bg: var(--color-brown-50);
        --table-row-hover: var(--color-tan-300);
        --table-selected-row-bg: var(--color-tan-200);
      }

      [data-theme="dark"] {
        --text-primary: var(--color-tan-50);
        --text-secondary: var(--color-purple-200);
        --text-link: var(--color-tan-50);
        --interactive-subtle: var(--color-purple-300);
        --border-strong: var(--color-purple-400);
        --background-header: var(--color-purple-800);
        --background-row: var(--color-purple-800); /* General row bg */
        --background-button-primary: var(--color-purple-500);
        --accent-brand: var(--color-orange-500);
        --background-primary: var(--color-black-900);
        --background-secondary: var(--color-purple-900); /* Details bg */
        --status-success: #50d37d;
        --background-highlight-primary: var(--color-black-800);
        --background-highlight-secondary: var(--color-brown-800);
        --background-highlight-tertiary: var(--color-brown-900);

        /* Table specific semantic variables - Dark */
        --table-background: var(--color-purple-800);
        --table-text: var(--color-tan-50);
        --table-header-bg: var(--color-purple-600);
        --table-row-bg: var(--color-purple-700);
        --table-row-hover: var(--color-purple-900);
        --table-selected-row-bg: var(--color-purple-600);
      }

      /* Scrollbar Styles */
      .scrollbar-hide {
        scrollbar-width: none; /* Firefox */
        -ms-overflow-style: none; /* IE and Edge */
      }
      .scrollbar-hide::-webkit-scrollbar {
        display: none; /* Chrome, Safari and Opera */
      }

      .scrollbar-transparent {
        scrollbar-width: thin; /* Firefox */
        scrollbar-color: transparent transparent; /* Firefox */
      }
      .scrollbar-transparent::-webkit-scrollbar {
        width: 8px;
        height: 8px;
        background-color: transparent;
      }
      .scrollbar-transparent::-webkit-scrollbar-thumb {
        background-color: rgba(0, 0, 0, 0.1);
        border-radius: 4px;
      }
      .scrollbar-transparent::-webkit-scrollbar-track {
        background-color: transparent;
      }
    </style>
  </head>
  <body class="font-sans m-0 p-0 bg-background-primary flex flex-col">
    <!-- Header/Menubar -->
    <header
      class="flex justify-between items-center bg-background-header px-8 py-4 border-b border-border-strong"
    >
      <!-- Logo -->
      <div class="text-text-primary text-lg">
        <img
          src="https://cdn.glitch.global/1f44bda7-6694-4547-8f1b-1fa1f48b5711/image.png?v=1742980720762"
          alt="Logo"
          class="h-[1em] inline-block"
        />
      </div>

      <!-- Navigation and Theme Controls -->
      <div class="flex items-center gap-4">
        <select
          id="theme-selector"
          class="bg-background-header text-text-primary border border-border-strong rounded py-1 px-2 text-sm"
          aria-label="Theme selector"
        >
          <option value="light">üåù</option>
          <option value="dark">üåö</option>
        </select>
        <div
          class="text-text-link text-md cursor-not-allowed"
          title="We're still working on our docs."
        >
          Documentation
        </div>
      </div>
    </header>

    <!-- Main Content Area -->
    <main class="p-4 flex flex-col gap-4 flex-1 transition-all duration-500">
      <!-- Filter Controls -->
      <div class="flex gap-2.5 items-center">
        <div class="relative">
          <input
            type="text"
            id="filter-text-box"
            placeholder="Filter table..."
            oninput="onFilterTextBoxChanged()"
            class="border border-border-strong rounded py-2 px-3 text-sm bg-background-primary text-text-primary focus:outline-none focus:ring-1 focus:ring-accent-brand"
            aria-label="Filter table content"
          />
          <button
            id="clear-filter"
            class="absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-text-primary opacity-80 hover:opacity-100"
            style="display: none"
          >
            ‚úï
          </button>
        </div>
      </div>

      <!-- Table Container -->
      <div class="flex transition-all">
        <div class="flex w-full overflow-hidden duration-500 rounded-md">
          <div
            id="table"
            class="w-full bg-background-primary ag-theme-alpine"
          ></div>
        </div>
      </div>
    </main>

    <!-- Scripts -->
    <!-- Theme Management -->
    <script>
      // Define theme objects using CSS variables (Consistent with tree.html)
      const lightTheme = {
        "text-primary": "var(--color-black-900)",
        "text-secondary": "var(--color-orange-800)",
        "text-link": "var(--color-purple-500)",
        "interactive-subtle": "var(--color-tan-500)",
        "border-strong": "var(--color-red-300)", // Note: tree.html uses red-500, keeping red-300 for now as it might be intentional for table borders
        "background-header": "var(--color-tan-100)",
        "background-row": "var(--color-tan-200)",
        "background-button-primary": "var(--color-red-300)",
        "accent-brand": "var(--color-orange-500)",
        "status-success": "#09983a",
        "background-primary": "var(--color-tan-50)",
        "background-secondary": "var(--color-tan-100)", // Adjusted to match tree.html's details pane
        "background-highlight-primary": "var(--color-tan-50)", // Adjusted
        "background-highlight-secondary": "var(--color-tan-200)", // Adjusted
        "background-highlight-tertiary": "var(--color-tan-100)", // Adjusted

        /* Table Specific Variables - Light Theme */
        "table-background": "var(--color-tan-50)",
        "table-text": "var(--color-black-900)",
        "table-header-bg": "var(--color-tan-100)",
        "table-row-bg": "var(--color-tan-50)",
        "table-row-hover": "var(--color-tan-100)",
        "table-selected-row-bg": "var(--color-tan-200)",
      };

      const darkTheme = {
        "text-primary": "var(--color-tan-50)",
        "text-secondary": "var(--color-purple-200)",
        "text-link": "var(--color-tan-50)",
        "interactive-subtle": "var(--color-purple-300)",
        "border-strong": "var(--color-purple-400)",
        "background-header": "var(--color-purple-800)",
        "background-row": "var(--color-purple-800)",
        "background-button-primary": "var(--color-purple-500)",
        "accent-brand": "var(--color-orange-500)",
        "status-success": "#50d37d",
        "background-primary": "var(--color-black-900)",
        "background-secondary": "var(--color-purple-900)", // Adjusted to match tree.html's details pane
        "background-highlight-primary": "var(--color-black-800)",
        "background-highlight-secondary": "var(--color-brown-800)",
        "background-highlight-tertiary": "var(--color-brown-900)",

        /* Table Specific Variables - Dark Theme */
        "table-background": "var(--color-black-900)",
        "table-text": "var(--color-tan-50)",
        "table-header-bg": "var(--color-purple-800)",
        "table-row-bg": "var(--color-black-900)",
        "table-row-hover": "var(--color-purple-700)",
        "table-selected-row-bg": "var(--color-purple-600)",
      };

      // Get user's theme preference from localStorage or system preference
      function getThemePreference() {
        const savedTheme = localStorage.getItem("theme");
        if (savedTheme) {
          return savedTheme;
        }

        // Check for system preference and return light or dark directly
        if (
          window.matchMedia &&
          window.matchMedia("(prefers-color-scheme: dark)").matches
        ) {
          return "dark";
        }

        return "light"; // Default to light
      }

      // Set initial theme
      const initialTheme = getThemePreference();
      document.documentElement.setAttribute("data-theme", initialTheme);

      // Apply theme colors based on preference
      function applyThemeColors() {
        const currentTheme =
          document.documentElement.getAttribute("data-theme");
        let colors;

        if (currentTheme === "dark") {
          colors = darkTheme;
        } else {
          // Default to light theme for any other value
          colors = lightTheme;
        }

        // Configure Tailwind with the selected theme colors
        tailwind.config = {
          theme: {
            extend: {
              colors: colors,
            },
          },
        };

        // Apply CSS variables for non-Tailwind components (like AG Grid)
        // This part is removed as CSS handles it via [data-theme]
      }

      // Apply initial theme
      applyThemeColors();

      // Theme switching functionality (from graph.html)
      document.addEventListener("DOMContentLoaded", function () {
        const themeSelector = document.getElementById("theme-selector");

        // Set the dropdown to match the current theme
        themeSelector.value = getThemePreference();

        // Listen for theme changes
        themeSelector.addEventListener("change", function () {
          const selectedTheme = this.value;
          document.documentElement.setAttribute("data-theme", selectedTheme);
          localStorage.setItem("theme", selectedTheme);
          applyThemeColors();

          // Force redraw of the page to apply new theme
          document.body.style.display = "none";
          setTimeout(() => {
            document.body.style.display = "";
          }, 5);
        });

        // Listen for system theme changes and update if no saved preference
        if (window.matchMedia) {
          window
            .matchMedia("(prefers-color-scheme: dark)")
            .addEventListener("change", function (e) {
              // Only apply system preference if there's no saved theme
              if (!localStorage.getItem("theme")) {
                // Set theme based on new system preference
                const newTheme = e.matches ? "dark" : "light";
                document.documentElement.setAttribute("data-theme", newTheme);
                themeSelector.value = newTheme;
                applyThemeColors();

                // Force redraw
                document.body.style.display = "none";
                setTimeout(() => {
                  document.body.style.display = "";
                }, 5);
              }
            });
        }
      });
    </script>

    <!-- Table Data and Grid Configuration -->
    <script>
      // Sample CSV data
      const csvData = {{ toRawJsonJs . }};

      /**
       * Convert CSV string to JSON array
       * @param {string} csvString - Raw CSV data
       * @returns {Array} Array of objects with header keys
       */
      function csvToJson(csvString) {
        const rows = csvString.split("\n");
        const headers = rows[0].split(",");

        // Start from index 1 to skip the header row
        return rows.slice(1).reduce((data, row) => {
          const values = row.split(",");
          const obj = {};

          for (let j = 0; j < headers.length; j++) {
            const key = headers[j].trim();
            obj[key] = values[j].trim();
          }

          data.push(obj);
          return data;
        }, []);
      }

      // Process data
      const jsonData = csvToJson(csvData.raw);

      // Extract headers from CSV
      const headers = csvData.raw.split("\n")[0].split(",");

      // Create column definitions dynamically from CSV headers
      const columnDefs = headers.map((header) => ({
        field: header.trim(),
      }));

      // AG Grid configuration
      const gridOptions = {
        rowData: jsonData,
        columnDefs: columnDefs,
        defaultColDef: {
          flex: 1,
        },
        domLayout: "autoHeight", // Make grid height fit content
      };

      /**
       * Handle filter text changes
       */
      function onFilterTextBoxChanged() {
        const filterValue =
          document.getElementById("filter-text-box").value || "";
        console.log(filterValue);
        gridAPI.setGridOption("quickFilterText", filterValue);
      }

      /**
       * Clear the filter and reset the grid
       */
      function clearFilter() {
        const filterInput = document.getElementById("filter-text-box");
        filterInput.value = "";
        onFilterTextBoxChanged();
        document.getElementById("clear-filter").style.display = "none";
      }

      // Initialize the grid when DOM is loaded
      document.addEventListener("DOMContentLoaded", function () {
        const myGridElement = document.querySelector("#table");
        const gridAPI = agGrid.createGrid(myGridElement, gridOptions);

        // Make gridAPI globally available for the filter function
        window.gridAPI = gridAPI;

        // Setup filter clear button functionality
        const filterInput = document.getElementById("filter-text-box");
        const clearButton = document.getElementById("clear-filter");

        // Show/hide clear button based on input content
        filterInput.addEventListener("input", function () {
          clearButton.style.display = this.value ? "block" : "none";
        });

        // Clear filter when button is clicked
        clearButton.addEventListener("click", clearFilter);
      });
    </script>
  </body>
</html>
